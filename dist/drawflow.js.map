{
  "version": 3,
  "sources": ["../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/rng.js", "../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js", "../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/native.js", "../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js", "../src/drawflow.ts"],
  "sourcesContent": ["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "import IDrawflow, {\n  ConnectionEvent,\n  ConnectionStartEvent,\n  DrawflowConnection,\n  DrawflowConnectionDetail,\n  DrawFlowEditorMode,\n  DrawflowExport,\n  DrawflowNode,\n  MousePositionEvent,\n  Vue,\n} from './types';\nimport { v4 as uuid } from 'uuid';\n\nexport * from './types';\n\nexport const htmlToTemplate = (_template: string): HTMLTemplateElement => {\n  const template = document.createElement('template');\n  template.innerHTML = _template;\n  return template;\n};\n\nexport const html = (strings: TemplateStringsArray, ...values: any[]) =>\n  String.raw({ raw: strings }, ...values);\n\nconst deleteBoxTemplate = document.createElement('template');\ndeleteBoxTemplate.innerHTML = html` <div class=\"drawflow-delete\">x</div> `;\n\nexport class Drawflow implements IDrawflow {\n  private events: Record<\n    string,\n    { listeners: ((event: any, det?: any) => void)[] }\n  > = {};\n  private nodeId: number = 1;\n  protected precanvas: HTMLElement | null = null;\n  private ele_selected: HTMLElement | null = null;\n  protected node_selected: HTMLElement | null = null;\n  private drag: boolean = false;\n\n  private _canvasX: number = 0;\n\n  get canvasX() {\n    return this._canvasX;\n  }\n\n  set canvasX(val: number) {\n    this._canvasX = val;\n    this.precanvas?.style.setProperty('--x', `${val}px`);\n  }\n\n  private _canvasY: number = 0;\n\n  get canvasY() {\n    return this._canvasY;\n  }\n\n  set canvasY(val: number) {\n    this._canvasY = val;\n    this.precanvas?.style.setProperty('--y', `${val}px`);\n  }\n\n  /**\n   * Active reroute\n   * @default false\n   */\n  reroute: boolean = false;\n\n  /**\n   * Fix adding points\n   * @default false\n   */\n  reroute_fix_curvature: boolean = false;\n\n  /**\n   * Curvature\n   * @default 0.5\n   */\n  curvature: number = 0.5;\n\n  /**\n   * Curvature reroute first point and last point\n   * @default 0.5\n   */\n  reroute_curvature_start_end: number = 0.5;\n\n  /**\n   * Curvature reroute\n   * @default 0.5\n   */\n  reroute_curvature: number = 0.5;\n\n  /**\n   * Width of reroute\n   * @default 6\n   */\n  reroute_width: number = 6;\n  private drag_point: boolean = false;\n  private editor_selected: boolean = false;\n  private connection: boolean = false;\n  private connection_ele: HTMLElement | SVGElement | null = null;\n  protected connection_selected: HTMLElement | SVGElement | null = null;\n\n  /**\n   * Canvas origin x coordinate\n   */\n  canvas_x: number = 0;\n\n  /**\n   * Canvas origin x coordinate\n   */\n  canvas_y: number = 0;\n  private pos_x: number = 0;\n  private pos_x_start: number = 0;\n  private pos_y: number = 0;\n  private pos_y_start: number = 0;\n  private mouse_x: number = 0;\n  private mouse_y: number = 0;\n\n  /**\n   * Width of line\n   * @default 5\n   */\n  line_path: number = 5;\n  first_click: HTMLElement | null = null;\n\n  /**\n   * Force the first input to drop the connection on top of the node\n   * @default false\n   */\n  force_first_input: boolean = false;\n\n  /**\n   * Drag nodes on click inputs\n   * @default true\n   */\n  draggable_inputs: boolean = true;\n\n  useuuid: boolean = false;\n\n  private noderegister: Record<\n    string,\n    {\n      html: any;\n      props: object | null;\n      options: object | null;\n    }\n  > = {};\n\n  /**\n   * Graph data object\n   */\n  drawflow: DrawflowExport = { drawflow: { Home: { data: {} } } };\n  // Configurable options\n  private module = 'Home';\n\n  get currentModule() {\n    return this.module;\n  }\n\n  /**\n   * edit or fixed mode\n   * @default edit\n   */\n  #editor_mode: DrawFlowEditorMode = 'edit';\n  set editor_mode(mode: DrawFlowEditorMode) {\n    this.#editor_mode = mode;\n    if (this.precanvas) this.precanvas.dataset.mode = mode;\n  }\n  get editor_mode() {\n    return this.#editor_mode;\n  }\n\n  /**\n   * Default zoom\n   * @default 1\n   */\n  zoom: number = 1;\n\n  /**\n   * Default zoom max\n   * @default 1.6\n   */\n  zoom_max: number = 1.6;\n  /**\n   * Default zoom min\n   * @default 0.5\n   */\n  zoom_min: number = 0.5;\n  /**\n   * Default zoom value update\n   * @default 0.1\n   */\n  zoom_value: number = 0.1;\n  /**\n   * Default zoom last value\n   * @default 1\n   */\n  zoom_last_value: number = 1;\n\n  // Mobile\n  private evCache = new Array();\n  private prevDiff = -1;\n\n  constructor(\n    private readonly container: HTMLElement,\n    private readonly render?: object,\n    private readonly parent?: object\n  ) {}\n\n  start() {\n    // console.info(\"Start Drawflow!!\");\n    this.container.classList.add('parent-drawflow');\n\n    this.container.tabIndex = 0;\n\n    this.precanvas = document.createElement('div');\n    Reflect.defineProperty(this, 'precanvas', { writable: false });\n    this.precanvas.classList.add('drawflow');\n\n    /* run side effects */\n    this.canvasX = this.canvasX;\n    this.canvasY = this.canvasY;\n    this.editor_mode = this.editor_mode;\n    /* -------- */\n\n    this.container.appendChild(this.precanvas);\n\n    /* Mouse and Touch Actions */\n    this.container.addEventListener('mouseup', this.dragEnd.bind(this));\n    this.container.addEventListener('mousemove', this.position.bind(this));\n    this.container.addEventListener('mousedown', this.click.bind(this));\n\n    this.container.addEventListener('touchend', this.dragEnd.bind(this));\n    this.container.addEventListener('touchmove', this.position.bind(this));\n    this.container.addEventListener('touchstart', this.click.bind(this));\n\n    /* Context Menu */\n    this.container.addEventListener('contextmenu', this.contextmenu.bind(this));\n    /* Delete */\n    this.container.addEventListener('keydown', this.key.bind(this));\n\n    /* Zoom Mouse */\n    this.container.addEventListener('wheel', this.zoom_enter.bind(this));\n    /* Update data Nodes */\n    this.container.addEventListener('input', this.updateNodeValue.bind(this));\n\n    this.container.addEventListener('dblclick', this.dblclick.bind(this));\n\n    /* Mobile zoom */\n    this.container.addEventListener(\n      'pointerdown',\n      this.pointerdown_handler.bind(this)\n    );\n\n    this.container.addEventListener(\n      'pointermove',\n      this.pointermove_handler.bind(this)\n    );\n\n    this.container.addEventListener(\n      'pointerup',\n      this.pointerup_handler.bind(this)\n    );\n\n    this.container.addEventListener(\n      'pointercancel',\n      this.pointerup_handler.bind(this)\n    );\n    // this.container.onpointerout = this.pointerup_handler.bind(this);\n\n    this.container.addEventListener(\n      'pointerleave',\n      this.pointerup_handler.bind(this)\n    );\n\n    this.load();\n  }\n\n  /* Mobile zoom */\n  private pointerdown_handler(ev: PointerEvent) {\n    this.evCache.push(ev);\n  }\n\n  private pointermove_handler(ev: PointerEvent) {\n    for (var i = 0; i < this.evCache.length; i++) {\n      if (ev.pointerId == this.evCache[i].pointerId) {\n        this.evCache[i] = ev;\n        break;\n      }\n    }\n\n    if (this.evCache.length == 2) {\n      // Calculate the distance between the two pointers\n      var curDiff = Math.abs(this.evCache[0].clientX - this.evCache[1].clientX);\n\n      if (this.prevDiff > 100) {\n        if (curDiff > this.prevDiff) {\n          // The distance between the two pointers has increased\n\n          this.zoom_in();\n        }\n        if (curDiff < this.prevDiff) {\n          // The distance between the two pointers has decreased\n          this.zoom_out();\n        }\n      }\n      this.prevDiff = curDiff;\n    }\n  }\n\n  private pointerup_handler(ev: PointerEvent) {\n    this.remove_event(ev);\n    if (this.evCache.length < 2) {\n      this.prevDiff = -1;\n    }\n  }\n\n  private remove_event(ev: PointerEvent) {\n    // Remove this event from the target's cache\n    for (var i = 0; i < this.evCache.length; i++) {\n      if (this.evCache[i].pointerId == ev.pointerId) {\n        this.evCache.splice(i, 1);\n        break;\n      }\n    }\n  }\n  /* End Mobile Zoom */\n  load(): void {\n    if (!this.precanvas) throw new Error('drawflow instance is not started');\n\n    for (const node of Object.values(\n      this.drawflow.drawflow[this.module].data\n    )) {\n      this.addNodeImport(node, this.precanvas);\n    }\n\n    if (this.reroute) {\n      for (const node of Object.values(\n        this.drawflow.drawflow[this.module].data\n      )) {\n        this.addRerouteImport(node);\n      }\n    }\n\n    for (var key in this.drawflow.drawflow[this.module].data) {\n      this.updateConnectionNodes('node-' + key);\n    }\n\n    const editor = this.drawflow.drawflow;\n    let number = 1;\n    Object.keys(editor).map(function (moduleName, index) {\n      Object.keys(editor[moduleName].data).map(function (id, index2) {\n        if (parseInt(id) >= number) {\n          number = parseInt(id) + 1;\n        }\n      });\n    });\n    this.nodeId = number;\n  }\n\n  private removeReouteConnectionSelected() {\n    this.dispatch('connectionUnselected', true);\n    if (this.reroute_fix_curvature) {\n      this.connection_selected?.parentElement\n        ?.querySelectorAll('.main-path')\n        .forEach((item, i) => {\n          item.classList.remove('selected');\n        });\n    }\n  }\n\n  private click(e: MouseEvent | TouchEvent): boolean | void {\n    this.dispatch('click', e);\n    const target = e.target as HTMLElement;\n\n    if (this.editor_mode === 'fixed') {\n      //return false;\n      e.preventDefault();\n\n      if (\n        target.classList[0] === 'parent-drawflow' ||\n        target.classList[0] === 'drawflow'\n      ) {\n        this.ele_selected = target.closest('.parent-drawflow');\n      } else {\n        return false;\n      }\n    } else if (this.editor_mode === 'view') {\n      if (\n        target.closest('.drawflow') != null ||\n        target.matches('.parent-drawflow')\n      ) {\n        this.ele_selected = target.closest('.parent-drawflow');\n        e.preventDefault();\n      }\n    } else {\n      this.first_click = e.target as HTMLElement;\n      this.ele_selected = e.target as HTMLElement;\n      if ((e as MouseEvent).button === 0) {\n        this.contextmenuDel();\n      }\n\n      if (target.closest('.drawflow_content_node') != null) {\n        this.ele_selected =\n          target.closest('.drawflow_content_node')?.parentElement ?? null;\n      }\n    }\n    switch (this.ele_selected?.classList[0]) {\n      case 'drawflow-node':\n        if (this.node_selected != null) {\n          this.node_selected.classList.remove('selected');\n          if (this.node_selected != this.ele_selected) {\n            this.dispatch('nodeUnselected', true);\n          }\n        }\n        if (this.connection_selected != null) {\n          this.connection_selected.classList.remove('selected');\n          this.removeReouteConnectionSelected();\n          this.connection_selected = null;\n        }\n        if (this.node_selected != this.ele_selected) {\n          this.dispatch('nodeSelected', this.ele_selected.id.slice(5));\n        }\n        this.node_selected = this.ele_selected;\n        this.node_selected.classList.add('selected');\n        if (!this.draggable_inputs) {\n          if (\n            target.tagName !== 'INPUT' &&\n            target.tagName !== 'TEXTAREA' &&\n            target.tagName !== 'SELECT' &&\n            target.hasAttribute('contenteditable') !== true\n          ) {\n            this.drag = true;\n          }\n        } else {\n          if (target.tagName !== 'SELECT') {\n            this.drag = true;\n          }\n        }\n        break;\n      case 'output':\n        this.connection = true;\n        if (this.node_selected != null) {\n          this.node_selected.classList.remove('selected');\n          this.node_selected = null;\n          this.dispatch('nodeUnselected', true);\n        }\n        if (this.connection_selected != null) {\n          this.connection_selected.classList.remove('selected');\n          this.removeReouteConnectionSelected();\n          this.connection_selected = null;\n        }\n        this.drawConnection(e.target as Element);\n        break;\n      case 'parent-drawflow':\n        if (this.node_selected != null) {\n          this.node_selected.classList.remove('selected');\n          this.node_selected = null;\n          this.dispatch('nodeUnselected', true);\n        }\n        if (this.connection_selected != null) {\n          this.connection_selected.classList.remove('selected');\n          this.removeReouteConnectionSelected();\n          this.connection_selected = null;\n        }\n        this.editor_selected = true;\n        break;\n      case 'drawflow':\n        if (this.node_selected != null) {\n          this.node_selected.classList.remove('selected');\n          this.node_selected = null;\n          this.dispatch('nodeUnselected', true);\n        }\n        if (this.connection_selected != null) {\n          this.connection_selected.classList.remove('selected');\n          this.removeReouteConnectionSelected();\n          this.connection_selected = null;\n        }\n        this.editor_selected = true;\n        break;\n      case 'main-path':\n        if (this.node_selected != null) {\n          this.node_selected.classList.remove('selected');\n          this.node_selected = null;\n          this.dispatch('nodeUnselected', true);\n        }\n        if (this.connection_selected != null) {\n          this.connection_selected.classList.remove('selected');\n          this.removeReouteConnectionSelected();\n          this.connection_selected = null;\n        }\n        this.connection_selected = this.ele_selected;\n        this.connection_selected.classList.add('selected');\n        const listclassConnection =\n          this.connection_selected?.parentElement?.classList ?? [];\n        if (listclassConnection.length > 1) {\n          this.dispatch('connectionSelected', {\n            output_id: listclassConnection[2].slice(14),\n            input_id: listclassConnection[1].slice(13),\n            output_class: listclassConnection[3],\n            input_class: listclassConnection[4],\n          });\n          if (this.reroute_fix_curvature) {\n            this.connection_selected?.parentElement\n              ?.querySelectorAll('.main-path')\n              .forEach((item, i) => {\n                item.classList.add('selected');\n              });\n          }\n        }\n        break;\n      case 'point':\n        this.drag_point = true;\n        this.ele_selected.classList.add('selected');\n        break;\n      case 'drawflow-delete':\n        if (this.node_selected) {\n          this.removeNodeId(this.node_selected.id);\n        }\n\n        if (this.connection_selected) {\n          this.removeConnection();\n        }\n\n        if (this.node_selected != null) {\n          this.node_selected.classList.remove('selected');\n          this.node_selected = null;\n          this.dispatch('nodeUnselected', true);\n        }\n        if (this.connection_selected != null) {\n          this.connection_selected.classList.remove('selected');\n          this.removeReouteConnectionSelected();\n          this.connection_selected = null;\n        }\n\n        break;\n      default:\n    }\n    if (e.type === 'touchstart') {\n      this.pos_x = (e as TouchEvent).touches[0].clientX;\n      this.pos_x_start = (e as TouchEvent).touches[0].clientX;\n      this.pos_y = (e as TouchEvent).touches[0].clientY;\n      this.pos_y_start = (e as TouchEvent).touches[0].clientY;\n      this.mouse_x = (e as TouchEvent).touches[0].clientX;\n      this.mouse_y = (e as TouchEvent).touches[0].clientY;\n    } else {\n      this.pos_x = (e as MouseEvent).clientX;\n      this.pos_x_start = (e as MouseEvent).clientX;\n      this.pos_y = (e as MouseEvent).clientY;\n      this.pos_y_start = (e as MouseEvent).clientY;\n    }\n    if (\n      ['input', 'output', 'main-path'].includes(\n        this.ele_selected?.classList?.[0] ?? ''\n      )\n    ) {\n      e.preventDefault();\n    }\n    this.dispatch('clickEnd', e);\n  }\n\n  updateNodePosition(\n    id: DrawflowNode['id'],\n    x: number,\n    y: number,\n    module: string = this.module\n  ) {\n    const ele_selected = this.precanvas!.querySelector<HTMLElement>(\n      `#node-${id}`\n    )!;\n    ele_selected.style.setProperty('--top', `${y}px`);\n    ele_selected.style.setProperty('--left', `${x}px`);\n\n    this.drawflow.drawflow[module].data[id].pos_x = x;\n    this.drawflow.drawflow[module].data[id].pos_y = y;\n\n    this.updateConnectionNodes(`node-${id}`);\n  }\n\n  private position(e: TouchEvent | MouseEvent) {\n    const { clientX: e_pos_x, clientY: e_pos_y } =\n      e instanceof MouseEvent ? e : e.touches[0];\n\n    if (this.connection) {\n      this.updateConnection(e_pos_x, e_pos_y);\n    }\n\n    if (this.editor_selected) {\n      const x = this.canvas_x + -(this.pos_x - e_pos_x);\n      const y = this.canvas_y + -(this.pos_y - e_pos_y);\n      this.dispatch('translate', { x: x, y: y });\n      this.canvasX = x;\n      this.canvasY = y;\n    } else if (this.drag && this.ele_selected) {\n      e.preventDefault();\n\n      const { offsetTop, offsetLeft, id } = this.ele_selected;\n\n      const x = offsetLeft - (this.pos_x - e_pos_x) / this.zoom - this.canvasX;\n      const y = offsetTop - (this.pos_y - e_pos_y) / this.zoom - this.canvasY;\n\n      this.pos_x = e_pos_x;\n      this.pos_y = e_pos_y;\n\n      this.ele_selected.style.setProperty('--top', `${y}px`);\n      this.ele_selected.style.setProperty('--left', `${x}px`);\n\n      this.drawflow.drawflow[this.module].data[id.slice(5)].pos_x = x;\n      this.drawflow.drawflow[this.module].data[id.slice(5)].pos_y = y;\n\n      this.updateConnectionNodes(id);\n    } else if (this.drag_point) {\n      console.log('drag_point');\n      // const x =\n      //   ((this.pos_x - e_pos_x) * this.precanvas!.clientWidth) /\n      //   (this.precanvas!.clientWidth * this.zoom);\n      // const y =\n      //   ((this.pos_y - e_pos_y) * this.precanvas!.clientHeight) /\n      //   (this.precanvas!.clientHeight * this.zoom);\n\n      this.pos_x = e_pos_x;\n      this.pos_y = e_pos_y;\n\n      const { x, y } = this.precanvas!.getBoundingClientRect();\n      const { clientWidth, clientHeight } = this.precanvas!;\n\n      const pos_x = (1 / this.zoom) * (this.pos_x - x);\n      const pos_y = (1 / this.zoom) * (this.pos_y - y);\n\n      // const pos_x = this.pos_x * (clientWidth / (clientWidth * this.zoom)) - x * (clientWidth / (clientWidth * this.zoom));\n      // const pos_y = this.pos_y * (clientHeight / (clientHeight * this.zoom)) - y * (clientHeight / (clientHeight * this.zoom));\n\n      this.ele_selected!.setAttribute('cx', pos_x.toString());\n      this.ele_selected!.setAttribute('cy', pos_y.toString());\n\n      const nodeUpdate =\n        this.ele_selected!.parentElement!.classList[2].slice(9);\n      const nodeUpdateIn =\n        this.ele_selected!.parentElement!.classList[1].slice(13);\n      const output_class = this.ele_selected!.parentElement!.classList[3];\n      const input_class = this.ele_selected!.parentElement!.classList[4];\n\n      let numberPointPosition =\n        Array.from(this.ele_selected!.parentElement!.children).indexOf(\n          this.ele_selected!\n        ) - 1;\n\n      if (this.reroute_fix_curvature) {\n        const numberMainPath =\n          this.ele_selected!.parentElement!.querySelectorAll('.main-path')\n            .length - 1;\n        numberPointPosition -= numberMainPath;\n        if (numberPointPosition < 0) {\n          numberPointPosition = 0;\n        }\n      }\n\n      const nodeId = nodeUpdate.slice(5);\n      const searchConnection = this.drawflow.drawflow[this.module].data[\n        nodeId\n      ].outputs[output_class].connections.findIndex(\n        (item) => item.node === nodeUpdateIn && item.output === input_class\n      );\n\n      this.drawflow.drawflow[this.module].data[nodeId].outputs[\n        output_class\n      ].connections[searchConnection].points![numberPointPosition] = {\n        pos_x: pos_x,\n        pos_y: pos_y,\n      };\n\n      const parentSelected =\n        this.ele_selected!.parentElement!.classList[2].slice(9);\n\n      this.updateConnectionNodes(parentSelected);\n    }\n\n    if (e.type === 'touchmove') {\n      this.mouse_x = e_pos_x;\n      this.mouse_y = e_pos_y;\n    }\n    this.dispatch('mouseMove', { x: e_pos_x, y: e_pos_y });\n  }\n\n  private dragEnd(e: MouseEvent | TouchEvent) {\n    let e_pos_x: number;\n    let e_pos_y: number;\n    let ele_last: Element;\n    if (e.type === 'touchend') {\n      e_pos_x = this.mouse_x;\n      e_pos_y = this.mouse_y;\n      ele_last = document.elementFromPoint(e_pos_x, e_pos_y) as Element;\n    } else {\n      e_pos_x = (e as MouseEvent).clientX;\n      e_pos_y = (e as MouseEvent).clientY;\n      ele_last = (e as MouseEvent).target as Element;\n    }\n\n    if (this.drag) {\n      if (this.pos_x_start != e_pos_x || this.pos_y_start != e_pos_y) {\n        this.dispatch('nodeMoved', this.ele_selected!.id.slice(5));\n      }\n    }\n\n    if (this.drag_point) {\n      this.ele_selected!.classList.remove('selected');\n      if (this.pos_x_start != e_pos_x || this.pos_y_start != e_pos_y) {\n        this.dispatch(\n          'rerouteMoved',\n          this.ele_selected!.parentElement!.classList[2].slice(14)\n        );\n      }\n    }\n\n    if (this.editor_selected) {\n      this.canvas_x = this.canvas_x + -(this.pos_x - e_pos_x);\n      this.canvas_y = this.canvas_y + -(this.pos_y - e_pos_y);\n      this.editor_selected = false;\n    }\n    if (this.connection === true) {\n      if (\n        ele_last.classList[0] === 'input' ||\n        (this.force_first_input &&\n          (ele_last.closest('.drawflow_content_node') != null ||\n            ele_last.classList[0] === 'drawflow-node'))\n      ) {\n        if (\n          this.force_first_input &&\n          (ele_last.closest('.drawflow_content_node') != null ||\n            ele_last.classList[0] === 'drawflow-node')\n        ) {\n          if (ele_last.closest('.drawflow_content_node') != null) {\n            var input_id = ele_last.closest('.drawflow_content_node')!\n              .parentElement!.id;\n          } else {\n            var input_id = ele_last.id;\n          }\n          if (\n            Object.keys(this.getNodeFromId(input_id.slice(5)).inputs).length ===\n            0\n          ) {\n            var input_class: string | boolean = false;\n          } else {\n            var input_class: string | boolean = 'input_1';\n          }\n        } else {\n          // Fix connection;\n          var input_id = ele_last.parentElement!.parentElement!.id;\n          var input_class: string | boolean = ele_last.classList[1];\n        }\n        var output_id = this.ele_selected!.parentElement!.parentElement!.id;\n        var output_class = this.ele_selected!.classList[1];\n\n        if (output_id !== input_id && input_class !== false) {\n          if (\n            !this.container.querySelector(\n              `.connection.node_in_${input_id}.node_out_${output_id}.${output_class}.${input_class}`\n            )\n          ) {\n            // Conection no exist save connection\n\n            this.connection_ele!.dataset.node_in = input_id;\n            this.connection_ele!.dataset.node_out = output_id;\n\n            this.connection_ele!.classList.add(\n              `node_in_${input_id}`,\n              `node_out_${output_id}`,\n              output_class\n            );\n\n            if (typeof input_class === 'string')\n              this.connection_ele!.classList.add(input_class);\n\n            var id_input = input_id.slice(5);\n            var id_output = output_id.slice(5);\n\n            this.drawflow.drawflow[this.module].data[id_output].outputs[\n              output_class\n            ].connections.push({ node: id_input, output: input_class });\n            this.drawflow.drawflow[this.module].data[id_input].inputs[\n              input_class\n            ].connections.push({ node: id_output, input: output_class });\n            this.updateConnectionNodes('node-' + id_output);\n            this.updateConnectionNodes('node-' + id_input);\n            this.dispatch('connectionCreated', {\n              output_id: id_output,\n              input_id: id_input,\n              output_class: output_class,\n              input_class: input_class,\n            });\n          } else {\n            this.dispatch('connectionCancel', true);\n            this.connection_ele!.remove();\n          }\n\n          this.connection_ele = null;\n        } else {\n          // Connection exists Remove Connection;\n          this.dispatch('connectionCancel', true);\n          this.connection_ele?.remove();\n          this.connection_ele = null;\n        }\n      } else {\n        // Remove Connection;\n        this.dispatch('connectionCancel', true);\n        this.connection_ele?.remove();\n        this.connection_ele = null;\n      }\n    }\n\n    this.drag = false;\n    this.drag_point = false;\n    this.connection = false;\n    this.ele_selected = null;\n    this.editor_selected = false;\n\n    this.dispatch('mouseUp', e);\n  }\n  protected contextmenu(\n    e: GlobalEventHandlersEventMap['contextmenu']\n  ): boolean | void {\n    this.dispatch('contextmenu', e);\n    e.preventDefault();\n    if (this.editor_mode === 'fixed' || this.editor_mode === 'view') {\n      return false;\n    }\n    if (this.precanvas!.getElementsByClassName('drawflow-delete').length) {\n      for (const el of this.precanvas!.getElementsByClassName(\n        'drawflow-delete'\n      )) {\n        el.remove();\n      }\n    }\n    if (this.node_selected || this.connection_selected) {\n      const deletebox = deleteBoxTemplate.content\n        .querySelector('.drawflow-delete')!\n        .cloneNode(true) as HTMLElement;\n\n      if (this.node_selected) {\n        this.node_selected.appendChild(deletebox);\n      }\n      if (\n        Number(this.connection_selected?.parentElement?.classList?.length) > 1\n      ) {\n        const { x, y } = this.precanvas!.getBoundingClientRect();\n        const { clientHeight, clientWidth } = this.precanvas!;\n        const { clientY, clientX } = e;\n\n        deletebox.style.top = `${\n          clientY * (clientHeight / (clientHeight * this.zoom)) -\n          y * (clientHeight / (clientHeight * this.zoom))\n        }px`;\n\n        deletebox.style.left = `${\n          clientX * (clientWidth / (clientWidth * this.zoom)) -\n          x * (clientWidth / (clientWidth * this.zoom))\n        }px`;\n\n        this.precanvas!.appendChild(deletebox);\n      }\n    }\n  }\n  protected contextmenuDel() {\n    if (this.precanvas!.getElementsByClassName('drawflow-delete').length) {\n      this.precanvas!.getElementsByClassName('drawflow-delete')[0].remove();\n    }\n  }\n\n  private key(e: KeyboardEvent): boolean | void {\n    this.dispatch('keydown', e);\n    if (this.editor_mode === 'fixed' || this.editor_mode === 'view') {\n      return false;\n    }\n    if (e.key === 'Delete' || (e.key === 'Backspace' && e.metaKey)) {\n      if (this.node_selected != null) {\n        if (\n          this.first_click!.tagName !== 'INPUT' &&\n          this.first_click!.tagName !== 'TEXTAREA' &&\n          this.first_click!.hasAttribute('contenteditable') !== true\n        ) {\n          this.removeNodeId(this.node_selected.id);\n        }\n      }\n      if (this.connection_selected != null) {\n        this.removeConnection();\n      }\n    }\n  }\n\n  private zoom_enter(event: WheelEvent, delta?: any) {\n    if (event.ctrlKey) {\n      event.preventDefault();\n      if (event.deltaY > 0) {\n        // Zoom Out\n        this.zoom_out();\n      } else {\n        // Zoom In\n        this.zoom_in();\n      }\n    }\n  }\n\n  /**\n   * Redraws according to new zoom\n   */\n  zoom_refresh() {\n    this.dispatch('zoom', this.zoom);\n    this.canvas_x = (this.canvas_x / this.zoom_last_value) * this.zoom;\n    this.canvas_y = (this.canvas_y / this.zoom_last_value) * this.zoom;\n    this.zoom_last_value = this.zoom;\n    this.precanvas!.style.setProperty('--scale', this.zoom.toString());\n    // this.precanvas!.style.transform =\n    //   'translate(' +\n    //   this.canvas_x +\n    //   'px, ' +\n    //   this.canvas_y +\n    //   'px) scale(' +\n    //   this.zoom +\n    //   ')';\n  }\n\n  /**\n   *  Increment zoom +0.1\n   */\n  zoom_in() {\n    if (this.zoom < this.zoom_max) {\n      this.zoom += this.zoom_value;\n      this.zoom_refresh();\n    }\n  }\n\n  /**\n   *  Decrement zoom -0.1\n   */\n  zoom_out() {\n    if (this.zoom > this.zoom_min) {\n      this.zoom -= this.zoom_value;\n      this.zoom_refresh();\n    }\n  }\n\n  /**\n   *  Restores zoom to 1\n   */\n  zoom_reset() {\n    if (this.zoom != 1) {\n      this.zoom = 1;\n      this.zoom_refresh();\n    }\n  }\n\n  private createCurvature(\n    start_pos_x: number,\n    start_pos_y: number,\n    end_pos_x: number,\n    end_pos_y: number,\n    curvature_value: number,\n    type: 'open' | 'close' | 'other' | 'openclose'\n  ): string {\n    const line_x = start_pos_x;\n    const line_y = start_pos_y;\n    const x = end_pos_x;\n    const y = end_pos_y;\n    const curvature = curvature_value;\n\n    let hx1: number;\n    let hx2: number;\n\n    //type openclose open close other\n    switch (type) {\n      case 'open':\n        hx1 = line_x + Math.abs(x - line_x) * curvature;\n        hx2 =\n          x -\n          Math.abs(x - line_x) *\n            (start_pos_x >= end_pos_x ? curvature * -1 : curvature);\n        break;\n      case 'close':\n        hx1 =\n          line_x +\n          Math.abs(x - line_x) *\n            (start_pos_x >= end_pos_x ? curvature * -1 : curvature);\n        hx2 = x - Math.abs(x - line_x) * curvature;\n        break;\n      case 'other':\n        hx1 =\n          line_x +\n          Math.abs(x - line_x) *\n            (start_pos_x >= end_pos_x ? curvature * -1 : curvature);\n        hx2 =\n          x -\n          Math.abs(x - line_x) *\n            (start_pos_x >= end_pos_x ? curvature * -1 : curvature);\n        break;\n      default:\n        hx1 = line_x + Math.abs(x - line_x) * curvature;\n        hx2 = x - Math.abs(x - line_x) * curvature;\n    }\n\n    return `M ${line_x} ${line_y} C ${hx1} ${line_y} ${hx2} ${y} ${x} ${y}`;\n  }\n\n  private drawConnection(ele: Element) {\n    const connection = htmlToTemplate(html`\n      <svg class=\"connection\">\n        <path class=\"main-path\" d=\"\" />\n      </svg>\n    `).content.cloneNode(true) as DocumentFragment;\n\n    this.connection_ele = connection.querySelector('.connection');\n    this.precanvas!.appendChild(connection);\n    const id_output = ele.parentElement!.parentElement!.id.slice(5);\n    const output_class = ele.classList[1];\n    this.dispatch('connectionStart', {\n      output_id: id_output,\n      output_class: output_class,\n    });\n  }\n\n  private updateConnection(eX: number, eY: number) {\n    const precanvas = this.precanvas;\n    const zoom = this.zoom;\n    let precanvasWitdhZoom =\n      precanvas!.clientWidth / (precanvas!.clientWidth * zoom);\n    precanvasWitdhZoom = precanvasWitdhZoom || 0;\n    let precanvasHeightZoom =\n      precanvas!.clientHeight / (precanvas!.clientHeight * zoom);\n    precanvasHeightZoom = precanvasHeightZoom || 0;\n    var path = this.connection_ele!.children[0];\n\n    var line_x =\n      this.ele_selected!.offsetWidth / 2 +\n      (this.ele_selected!.getBoundingClientRect().x -\n        precanvas!.getBoundingClientRect().x) *\n        precanvasWitdhZoom;\n    var line_y =\n      this.ele_selected!.offsetHeight / 2 +\n      (this.ele_selected!.getBoundingClientRect().y -\n        precanvas!.getBoundingClientRect().y) *\n        precanvasHeightZoom;\n\n    var x =\n      eX *\n        (this.precanvas!.clientWidth /\n          (this.precanvas!.clientWidth * this.zoom)) -\n      this.precanvas!.getBoundingClientRect().x *\n        (this.precanvas!.clientWidth /\n          (this.precanvas!.clientWidth * this.zoom));\n    var y =\n      eY *\n        (this.precanvas!.clientHeight /\n          (this.precanvas!.clientHeight * this.zoom)) -\n      this.precanvas!.getBoundingClientRect().y *\n        (this.precanvas!.clientHeight /\n          (this.precanvas!.clientHeight * this.zoom));\n\n    var curvature = this.curvature;\n    var lineCurve = this.createCurvature(\n      line_x,\n      line_y,\n      x,\n      y,\n      curvature,\n      'openclose'\n    );\n    path.setAttributeNS(null, 'd', lineCurve);\n  }\n\n  /**\n   * Add connection. Ex: 15,16,'output_1','input_1'\n   * @param outputNodeId\n   * @param inputNodeId\n   * @param outputName\n   * @param inputName\n   */\n  addConnection(\n    id_output: string | number,\n    id_input: string | number,\n    output_class: string,\n    input_class: string,\n    connection_class: string = ''\n  ) {\n    const nodeOneModule = this.getModuleFromNodeId(id_output);\n    // const nodeTwoModule = this.getModuleFromNodeId(id_input);\n\n    if (nodeOneModule === this.getModuleFromNodeId(id_input)) {\n      const dataNode: DrawflowNode = this.getNodeFromId(id_output);\n\n      const exist: boolean = !!dataNode.outputs[output_class]?.connections.find(\n        ({ node, output }) => node === id_input && output === input_class\n      );\n\n      // for (const {node, output} of dataNode.outputs[output_class].connections) {\n      //   // const {node, output} = dataNode.outputs[output_class].connections[checkOutput];\n      //   if (node === id_input && output === input_class) {\n      //     exist = true;\n      //     break;\n      //   }\n      // }\n      // Check connection exist\n      if (exist) return;\n      //Create Connection\n      this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[\n        output_class\n      ]?.connections.push({\n        node: id_input.toString(),\n        output: input_class,\n        pathClass: connection_class,\n      });\n      this.drawflow.drawflow[nodeOneModule].data[id_input].inputs[\n        input_class\n      ]?.connections.push({\n        node: id_output.toString(),\n        input: output_class,\n        pathClass: connection_class,\n      });\n\n      if (this.module === nodeOneModule && this.precanvas) {\n        //Draw connection\n        const con = htmlToTemplate(html`\n          <svg\n            class=\"connection node_in_node-${id_input} node_out_node-${id_output} ${output_class} ${input_class} ${connection_class}\"\n            data-node_in=\"node-${id_input}\"\n            data-node_out=\"node-${id_output}\"\n          >\n            <path class=\"main-path\" d=\"\" />\n          </svg>\n        `).content.cloneNode(true);\n\n        this.precanvas.appendChild(con);\n        this.updateConnectionNodes(`node-${id_output}`);\n        this.updateConnectionNodes(`node-${id_input}`);\n      }\n\n      this.dispatch('connectionCreated', {\n        output_id: id_output,\n        input_id: id_input,\n        output_class: output_class,\n        input_class: input_class,\n      });\n      // }\n    }\n  }\n\n  /**\n   * Update connections position from Node Ex id: node-x\n   * @param id\n   */\n  updateConnectionNodes(id: DrawflowNode['id']): void {\n    const idSearchIn = `node_in_${id}`;\n    const idSearchOut = `node_out_${id}`;\n    const container = this.container;\n    const precanvas = this.precanvas!;\n    const curvature = this.curvature;\n    const reroute_curvature = this.reroute_curvature;\n    const reroute_curvature_start_end = this.reroute_curvature_start_end;\n    const reroute_fix_curvature = this.reroute_fix_curvature;\n    const rerouteWidth = this.reroute_width;\n    const zoom = this.zoom;\n    const precanvasWitdhZoom =\n      precanvas!.clientWidth / (precanvas!.clientWidth * zoom) || 0;\n    const precanvasHeightZoom =\n      precanvas!.clientHeight / (precanvas!.clientHeight * zoom) || 0;\n\n    // const elemsOut = container.querySelectorAll<SVGElement>(`.${idSearchOut}`);\n\n    const { x: pcX, y: pcY } = precanvas.getBoundingClientRect();\n\n    for (const el of container.querySelectorAll<SVGElement>(\n      `.${idSearchOut}`\n    )) {\n      if (el.querySelector('.point') === null) {\n        const id_search = el.dataset.node_in;\n        if (!id_search) return;\n\n        const elStart = container.querySelector<HTMLElement>(\n          `#${id} .${el.classList[3]}`\n        )!;\n\n        if (!elStart) return;\n\n        const elEnd = container.querySelector<HTMLElement>(\n          `#${id_search} .${el.classList[4]}`\n        );\n\n        if (!elEnd) return;\n\n        const { x: elStartX, y: elStartY } = elEnd.getBoundingClientRect();\n        const { x: elEndX, y: elEndY } = elStart.getBoundingClientRect();\n\n        const endX =\n          elEnd.offsetWidth / 2 + (elStartX - pcX) * precanvasWitdhZoom;\n\n        const endY =\n          elEnd.offsetHeight / 2 + (elStartY - pcY) * precanvasHeightZoom;\n\n        const startX =\n          elStart.offsetWidth / 2 + (elEndX - pcX) * precanvasWitdhZoom;\n\n        const startY =\n          elStart.offsetHeight / 2 + (elEndY - pcY) * precanvasHeightZoom;\n\n        const lineCurve = this.createCurvature(\n          startX,\n          startY,\n          endX,\n          endY,\n          curvature,\n          'openclose'\n        );\n        (el.children[0] as SVGPathElement).setAttributeNS(null, 'd', lineCurve);\n      } else {\n        const points = el.querySelectorAll('.point') as NodeListOf<HTMLElement>;\n        let linecurve = '';\n        const reoute_fix: string[] = [];\n\n        points.forEach((item, i) => {\n          if (i === 0 && points.length - 1 === 0) {\n            const { x: elX, y: elY } = item.getBoundingClientRect();\n            //\n            console.log(item);\n\n            {\n              const eX = (elX - pcX) * precanvasWitdhZoom + rerouteWidth;\n              const eY = (elY - pcY) * precanvasHeightZoom + rerouteWidth;\n\n              const elemtsearchOut = container.querySelector<HTMLElement>(\n                `#${id} .${item.parentElement!.classList[3]}`\n              )!;\n\n              const { x: elSearchOutX, y: elSearchOutY } =\n                elemtsearchOut.getBoundingClientRect();\n\n              const line_x =\n                elemtsearchOut.offsetWidth / 2 +\n                (elSearchOutX - pcX) * precanvasWitdhZoom;\n\n              const line_y =\n                elemtsearchOut.offsetHeight / 2 +\n                (elSearchOutY - pcY) * precanvasHeightZoom;\n\n              const lineCurveSearch = this.createCurvature(\n                line_x,\n                line_y,\n                eX,\n                eY,\n                reroute_curvature_start_end,\n                'open'\n              );\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            }\n            {\n              // const elemtsearchId_out = item;\n              const id_search = item.parentElement!.classList[1].replace(\n                'node_in_',\n                ''\n              );\n\n              const elemtsearchIn = container.querySelector<HTMLElement>(\n                `#${id_search} .${item.parentElement!.classList[4]}`\n              )!;\n\n              const { x: elSearchX, y: elSearchY } =\n                elemtsearchIn.getBoundingClientRect();\n\n              const eX =\n                elemtsearchIn.offsetWidth / 2 +\n                (elSearchX - pcX) * precanvasWitdhZoom;\n\n              const eY =\n                elemtsearchIn.offsetHeight / 2 +\n                (elSearchY - pcY) * precanvasHeightZoom;\n\n              const line_x = (elX - pcX) * precanvasWitdhZoom + rerouteWidth;\n              const line_y = (elY - pcY) * precanvasHeightZoom + rerouteWidth;\n\n              const lineCurveSearch = this.createCurvature(\n                line_x,\n                line_y,\n                eX,\n                eY,\n                reroute_curvature_start_end,\n                'close'\n              );\n              linecurve += lineCurveSearch;\n              reoute_fix.push(lineCurveSearch);\n            }\n          } else if (i === 0) {\n            var elemtsearchId_out = container.querySelector(\n              `#${id}`\n            ) as HTMLElement;\n            var elemtsearch = item;\n\n            var eX =\n              (elemtsearch.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var eY =\n              (elemtsearch.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n\n            var elemtsearchOut = elemtsearchId_out.querySelectorAll(\n              '.' + item.parentElement!.classList[3]\n            )[0] as HTMLElement;\n            var line_x =\n              elemtsearchOut.offsetWidth / 2 +\n              (elemtsearchOut.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom;\n            var line_y =\n              elemtsearchOut.offsetHeight / 2 +\n              (elemtsearchOut.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom;\n\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature_start_end,\n              'open'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n\n            // SECOND\n            var elemtsearchId_out = item;\n            var elemtsearch = points[i + 1];\n\n            var eX =\n              (elemtsearch.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var eY =\n              (elemtsearch.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n            var line_x =\n              (elemtsearchId_out.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var line_y =\n              (elemtsearchId_out.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature,\n              'other'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n          } else if (i === points.length - 1) {\n            var elemtsearchId_out = item;\n\n            var id_search = item.parentElement!.classList[1].replace(\n              'node_in_',\n              ''\n            );\n            var elemtsearchId = container.querySelector(\n              `#${id_search}`\n            ) as HTMLElement;\n            var elemtsearch = elemtsearchId.querySelectorAll(\n              '.' + item.parentElement!.classList[4]\n            )[0] as HTMLElement;\n\n            var elemtsearchIn = elemtsearchId.querySelectorAll(\n              '.' + item.parentElement!.classList[4]\n            )[0] as HTMLElement;\n            var eX =\n              elemtsearchIn.offsetWidth / 2 +\n              (elemtsearchIn.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom;\n            var eY =\n              elemtsearchIn.offsetHeight / 2 +\n              (elemtsearchIn.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom;\n            var line_x =\n              (elemtsearchId_out.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                (precanvas.clientWidth / (precanvas.clientWidth * zoom)) +\n              rerouteWidth;\n            var line_y =\n              (elemtsearchId_out.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                (precanvas.clientHeight / (precanvas.clientHeight * zoom)) +\n              rerouteWidth;\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature_start_end,\n              'close'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n          } else {\n            var elemtsearchId_out = item;\n            var elemtsearch = points[i + 1];\n\n            var eX =\n              (elemtsearch.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                (precanvas.clientWidth / (precanvas.clientWidth * zoom)) +\n              rerouteWidth;\n            var eY =\n              (elemtsearch.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                (precanvas.clientHeight / (precanvas.clientHeight * zoom)) +\n              rerouteWidth;\n            var line_x =\n              (elemtsearchId_out.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                (precanvas.clientWidth / (precanvas.clientWidth * zoom)) +\n              rerouteWidth;\n            var line_y =\n              (elemtsearchId_out.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                (precanvas.clientHeight / (precanvas.clientHeight * zoom)) +\n              rerouteWidth;\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature,\n              'other'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n          }\n        });\n        if (reroute_fix_curvature) {\n          reoute_fix.forEach((itempath, i) => {\n            el.children[i].setAttributeNS(null, 'd', itempath);\n          });\n        } else {\n          el.children[0].setAttributeNS(null, 'd', linecurve);\n        }\n      }\n    }\n\n    // const elemsIn = container.querySelectorAll<SVGElement>(`.${idSearchIn}`);\n\n    for (const el of container.querySelectorAll<SVGElement>(`.${idSearchIn}`)) {\n      if (el.querySelector('.point') === null) {\n        const elemtsearch = container.querySelector<HTMLElement>(\n          `#${el.dataset.node_out} .${el.classList[3]}`\n        )!;\n\n        console.log(el, `#${el.dataset.node_out} .${el.classList[3]}`);\n\n        const { x: elX, y: elY } = elemtsearch.getBoundingClientRect();\n\n        const line_x =\n          elemtsearch.offsetWidth / 2 + (elX - pcX) * precanvasWitdhZoom;\n        const line_y =\n          elemtsearch.offsetHeight / 2 + (elY - pcY) * precanvasHeightZoom;\n\n        const elemtsearchId_in = container.querySelectorAll(\n          `#${id} .${el.classList[4]}`\n        )[0] as HTMLElement;\n        const x =\n          elemtsearchId_in.offsetWidth / 2 +\n          (elemtsearchId_in.getBoundingClientRect().x -\n            precanvas.getBoundingClientRect().x) *\n            precanvasWitdhZoom;\n        const y =\n          elemtsearchId_in.offsetHeight / 2 +\n          (elemtsearchId_in.getBoundingClientRect().y -\n            precanvas.getBoundingClientRect().y) *\n            precanvasHeightZoom;\n\n        const lineCurve = this.createCurvature(\n          line_x,\n          line_y,\n          x,\n          y,\n          curvature,\n          'openclose'\n        );\n        el.children[0].setAttributeNS(null, 'd', lineCurve);\n      } else {\n        const points = el.querySelectorAll<HTMLElement>('.point');\n        let linecurve = '';\n        const reoute_fix: string[] = [];\n        points.forEach((item, i) => {\n          if (i === 0 && points.length - 1 === 0) {\n            var elemtsearchId_out = container.querySelector(\n              `#${id}`\n            ) as HTMLElement;\n            var elemtsearch = item;\n\n            var line_x =\n              (elemtsearch.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var line_y =\n              (elemtsearch.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n\n            var elemtsearchIn = elemtsearchId_out.querySelectorAll(\n              '.' + item.parentElement!.classList[4]\n            )[0] as HTMLElement;\n            var eX =\n              elemtsearchIn.offsetWidth / 2 +\n              (elemtsearchIn.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom;\n            var eY =\n              elemtsearchIn.offsetHeight / 2 +\n              (elemtsearchIn.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom;\n\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature_start_end,\n              'close'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n\n            var elemtsearchId_out = item;\n            var id_search = item.parentElement!.classList[2].replace(\n              'node_out_',\n              ''\n            );\n            var elemtsearchId = container.querySelector(\n              `#${id_search}`\n            ) as HTMLElement;\n            var elemtsearch = elemtsearchId.querySelectorAll(\n              '.' + item.parentElement!.classList[3]\n            )[0] as HTMLElement;\n\n            var elemtsearchOut = elemtsearchId.querySelectorAll(\n              '.' + item.parentElement!.classList[3]\n            )[0] as HTMLElement;\n            var line_x =\n              elemtsearchOut.offsetWidth / 2 +\n              (elemtsearchOut.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom;\n            var line_y =\n              elemtsearchOut.offsetHeight / 2 +\n              (elemtsearchOut.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom;\n\n            var eX =\n              (elemtsearchId_out.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var eY =\n              (elemtsearchId_out.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature_start_end,\n              'open'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n          } else if (i === 0) {\n            // FIRST\n            var elemtsearchId_out = item;\n            var id_search = item.parentElement!.classList[2].replace(\n              'node_out_',\n              ''\n            );\n            var elemtsearchId = container.querySelector<HTMLElement>(\n              `#${id_search}`\n            )!;\n            var elemtsearch = elemtsearchId.querySelectorAll<HTMLElement>(\n              '.' + item.parentElement!.classList[3]\n            )[0];\n            var elemtsearchOut = elemtsearchId.querySelectorAll<HTMLElement>(\n              '.' + item.parentElement!.classList[3]\n            )[0];\n            var line_x =\n              elemtsearchOut.offsetWidth / 2 +\n              (elemtsearchOut.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom;\n            var line_y =\n              elemtsearchOut.offsetHeight / 2 +\n              (elemtsearchOut.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom;\n\n            var eX =\n              (elemtsearchId_out.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var eY =\n              (elemtsearchId_out.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature_start_end,\n              'open'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n\n            // SECOND\n            var elemtsearchId_out = item;\n            var elemtsearch = points[i + 1];\n\n            var eX =\n              (elemtsearch.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var eY =\n              (elemtsearch.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n            var line_x =\n              (elemtsearchId_out.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var line_y =\n              (elemtsearchId_out.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature,\n              'other'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n          } else if (i === points.length - 1) {\n            var elemtsearchId_out = item;\n\n            var id_search = item.parentElement!.classList[1].replace(\n              'node_in_',\n              ''\n            );\n            var elemtsearchId = container.querySelector<HTMLElement>(\n              `#${id_search}`\n            )!;\n            var elemtsearch = elemtsearchId.querySelectorAll<HTMLElement>(\n              '.' + item.parentElement!.classList[4]\n            )[0];\n\n            var elemtsearchIn = elemtsearchId.querySelectorAll<HTMLElement>(\n              '.' + item.parentElement!.classList[4]\n            )[0];\n            var eX =\n              elemtsearchIn.offsetWidth / 2 +\n              (elemtsearchIn.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom;\n            var eY =\n              elemtsearchIn.offsetHeight / 2 +\n              (elemtsearchIn.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom;\n\n            var line_x =\n              (elemtsearchId_out.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var line_y =\n              (elemtsearchId_out.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature_start_end,\n              'close'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n          } else {\n            var elemtsearchId_out = item;\n            var elemtsearch = points[i + 1];\n\n            var eX =\n              (elemtsearch.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var eY =\n              (elemtsearch.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n            var line_x =\n              (elemtsearchId_out.getBoundingClientRect().x -\n                precanvas.getBoundingClientRect().x) *\n                precanvasWitdhZoom +\n              rerouteWidth;\n            var line_y =\n              (elemtsearchId_out.getBoundingClientRect().y -\n                precanvas.getBoundingClientRect().y) *\n                precanvasHeightZoom +\n              rerouteWidth;\n            var x = eX;\n            var y = eY;\n\n            var lineCurveSearch = this.createCurvature(\n              line_x,\n              line_y,\n              x,\n              y,\n              reroute_curvature,\n              'other'\n            );\n            linecurve += lineCurveSearch;\n            reoute_fix.push(lineCurveSearch);\n          }\n        });\n        if (reroute_fix_curvature) {\n          reoute_fix.forEach((itempath, i) => {\n            el.children[i].setAttributeNS(null, 'd', itempath);\n          });\n        } else {\n          el.children[0].setAttributeNS(null, 'd', linecurve);\n        }\n      }\n    }\n  }\n\n  private dblclick(e: MouseEvent) {\n    if (this.connection_selected != null && this.reroute) {\n      this.createReroutePoint(this.connection_selected);\n    }\n\n    if ((e.target as HTMLElement).classList[0] === 'point') {\n      this.removeReroutePoint(e.target as HTMLElement);\n    }\n  }\n\n  private createReroutePoint(ele: HTMLElement | SVGElement) {\n    this.connection_selected!.classList.remove('selected');\n    const nodeUpdate =\n      this.connection_selected!.parentElement!.classList[2].slice(9);\n    const nodeUpdateIn =\n      this.connection_selected!.parentElement!.classList[1].slice(13);\n    const output_class = this.connection_selected!.parentElement!.classList[3];\n    const input_class = this.connection_selected!.parentElement!.classList[4];\n    this.connection_selected = null;\n    const point = document.createElementNS(\n      'http://www.w3.org/2000/svg',\n      'circle'\n    );\n    point.classList.add('point');\n    var pos_x =\n      this.pos_x *\n        (this.precanvas!.clientWidth /\n          (this.precanvas!.clientWidth * this.zoom)) -\n      this.precanvas!.getBoundingClientRect().x *\n        (this.precanvas!.clientWidth /\n          (this.precanvas!.clientWidth * this.zoom));\n    var pos_y =\n      this.pos_y *\n        (this.precanvas!.clientHeight /\n          (this.precanvas!.clientHeight * this.zoom)) -\n      this.precanvas!.getBoundingClientRect().y *\n        (this.precanvas!.clientHeight /\n          (this.precanvas!.clientHeight * this.zoom));\n\n    point.setAttributeNS(null, 'cx', pos_x.toString());\n    point.setAttributeNS(null, 'cy', pos_y.toString());\n    point.setAttributeNS(null, 'r', this.reroute_width.toString());\n\n    let position_add_array_point = 0;\n    if (this.reroute_fix_curvature) {\n      const numberPoints =\n        ele.parentElement!.querySelectorAll('.main-path').length;\n      var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n      path.classList.add('main-path');\n      path.setAttributeNS(null, 'd', '');\n\n      ele.parentElement!.insertBefore(\n        path,\n        ele.parentElement!.children[numberPoints]\n      );\n      if (numberPoints === 1) {\n        ele.parentElement!.appendChild(point);\n      } else {\n        const search_point = Array.from(ele.parentElement!.children).indexOf(\n          ele\n        );\n        position_add_array_point = search_point;\n        ele.parentElement!.insertBefore(\n          point,\n          ele.parentElement!.children[search_point + numberPoints + 1]\n        );\n      }\n    } else {\n      ele.parentElement!.appendChild(point);\n    }\n\n    const nodeId = nodeUpdate.slice(5);\n    const searchConnection = this.drawflow.drawflow[this.module].data[\n      nodeId\n    ].outputs[output_class].connections.findIndex(function (item, i) {\n      return item.node === nodeUpdateIn && item.output === input_class;\n    });\n\n    if (\n      this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class]\n        .connections[searchConnection].points === undefined\n    ) {\n      this.drawflow.drawflow[this.module].data[nodeId].outputs[\n        output_class\n      ].connections[searchConnection].points = [];\n    }\n\n    if (this.reroute_fix_curvature) {\n      if (\n        position_add_array_point > 0 ||\n        !!this.drawflow.drawflow[this.module].data[nodeId].outputs[output_class]\n          .connections[searchConnection].points?.length\n      ) {\n        this.drawflow.drawflow[this.module].data[nodeId].outputs[\n          output_class\n        ].connections[searchConnection].points?.splice(\n          position_add_array_point,\n          0,\n          { pos_x: pos_x, pos_y: pos_y }\n        );\n      } else {\n        this.drawflow.drawflow[this.module].data[nodeId].outputs[\n          output_class\n        ].connections[searchConnection].points?.push({\n          pos_x: pos_x,\n          pos_y: pos_y,\n        });\n      }\n\n      ele.parentElement!.querySelectorAll('.main-path').forEach((item, i) => {\n        item.classList.remove('selected');\n      });\n    } else {\n      this.drawflow.drawflow[this.module].data[nodeId].outputs[\n        output_class\n      ].connections[searchConnection].points?.push({\n        pos_x: pos_x,\n        pos_y: pos_y,\n      });\n    }\n\n    this.dispatch('addReroute', nodeId);\n    this.updateConnectionNodes(nodeUpdate);\n  }\n\n  private removeReroutePoint(ele: HTMLElement) {\n    const nodeUpdate = ele.parentElement!.classList[2].slice(9);\n    const nodeUpdateIn = ele.parentElement!.classList[1].slice(13);\n    const output_class = ele.parentElement!.classList[3];\n    const input_class = ele.parentElement!.classList[4];\n\n    let numberPointPosition = Array.from(ele.parentElement!.children).indexOf(\n      ele\n    );\n    const nodeId = nodeUpdate.slice(5);\n    const searchConnection = this.drawflow.drawflow[this.module].data[\n      nodeId\n    ].outputs[output_class].connections.findIndex(function (item, i) {\n      return item.node === nodeUpdateIn && item.output === input_class;\n    });\n\n    if (this.reroute_fix_curvature) {\n      const numberMainPath =\n        ele.parentElement!.querySelectorAll('.main-path').length;\n      ele.parentElement!.children[numberMainPath - 1].remove();\n      numberPointPosition -= numberMainPath;\n      if (numberPointPosition < 0) {\n        numberPointPosition = 0;\n      }\n    } else {\n      numberPointPosition--;\n    }\n    this.drawflow.drawflow[this.module].data[nodeId].outputs[\n      output_class\n    ].connections[searchConnection].points?.splice(numberPointPosition, 1);\n\n    ele.remove();\n    this.dispatch('removeReroute', nodeId);\n    this.updateConnectionNodes(nodeUpdate);\n  }\n\n  /**\n   *\n   * @param name Name of module registered.\n   * @param component HTML to drawn or vue component.\n   * @param props Only for vue. Props of component. Not Required\n   * @param options Only for vue. Options of component. Not Required\n   */\n  registerNode(name: string, component: any): void;\n  registerNode(\n    name: string,\n    component: any,\n    props: object,\n    options: object\n  ): void;\n  registerNode(\n    name: string,\n    component: any,\n    props: object | null = null,\n    options: object | null = null\n  ): void {\n    this.noderegister[name] = {\n      html: component,\n      props: props,\n      options: options,\n    };\n  }\n\n  /**\n   * Get Info of node. Ex: id: 5\n   */\n  getNodeFromId(id: string | number): DrawflowNode {\n    const moduleName = this.getModuleFromNodeId(id);\n    return JSON.parse(\n      JSON.stringify(this.drawflow.drawflow[moduleName].data[id])\n    );\n  }\n\n  /**\n   *  Return Array of nodes id. Ex: name: telegram\n   */\n  getNodesFromName(name: string): DrawflowNode['id'][] {\n    const nodes: DrawflowNode['id'][] = [];\n    const editor = this.drawflow.drawflow;\n    Object.keys(editor).map((moduleName) => {\n      for (const node in editor[moduleName].data) {\n        if (editor[moduleName].data[node].name == name) {\n          nodes.push(editor[moduleName].data[node].id);\n        }\n      }\n    });\n    return nodes;\n  }\n\n  protected renderNodeFirstTime(\n    dataNode: DrawflowNode,\n    precanvas: HTMLElement\n  ) {\n    const template = html`\n      <div class=\"parent-node\">\n        <div\n          id=\"node-${dataNode.id}\"\n          class=\"drawflow-node ${dataNode.class || ''}\"\n          style=\"\n          --top: ${dataNode.pos_y}px;\n          --left: ${dataNode.pos_x}px;\n          top: calc(var(--top, 0px) + var(--y, 0px));\n          left: calc(var(--left, 0px) + var(--x, 0px));\n        \"\n        >\n          <div class=\"inputs\">\n            ${Object.keys(dataNode.inputs)\n              .map(\n                (input_item) => html` <div class=\"input ${input_item}\"></div> `\n              )\n              .join('')}\n          </div>\n          <div class=\"drawflow_content_node\"></div>\n          <div class=\"outputs\">\n            ${Object.keys(dataNode.outputs)\n              .map(\n                (output_item) =>\n                  html` <div class=\"output ${output_item}\"></div> `\n              )\n              .join('')}\n          </div>\n        </div>\n      </div>\n    `;\n\n    const parent = htmlToTemplate(template).content.cloneNode(\n      true\n    ) as DocumentFragment;\n\n    const content = parent.querySelector<HTMLDivElement>(\n      `#node-${dataNode.id} .drawflow_content_node`\n    )!;\n\n    if (dataNode.typenode === false) {\n      content.innerHTML = dataNode.html;\n    } else if (dataNode.typenode === true) {\n      const { html: template } = this.noderegister[dataNode.html];\n\n      if (!(template instanceof Element))\n        throw new TypeError('html must be instace of Element');\n\n      const nodeTree =\n        template instanceof HTMLTemplateElement ? template.content : template;\n\n      content.appendChild(nodeTree.cloneNode(true));\n    }\n\n    precanvas.appendChild(parent);\n\n    if (dataNode.typenode === 'vue') {\n      if (parseInt((this.render as Vue).version) === 3) {\n        //Vue 3\n        const wrapper = (this.render as Vue).h(\n          this.noderegister[dataNode.html].html,\n          this.noderegister[dataNode.html].props,\n          this.noderegister[dataNode.html].options\n        );\n        wrapper.appContext = this.parent;\n        (this.render as Vue).render(wrapper, content);\n      } else {\n        //Vue 2\n        const wrapper = new (this.render as Vue)({\n          parent: this.parent,\n          render: (h: (...args: any) => any) =>\n            h(this.noderegister[dataNode.html].html, {\n              props: this.noderegister[dataNode.html].props,\n            }),\n          ...this.noderegister[dataNode.html].options,\n        }).$mount();\n        content.appendChild(wrapper.$el);\n      }\n    }\n\n    // Object.entries(dataNode.data).forEach(function ([key, value]) {\n    //   if (value === null) return;\n\n    //   if (typeof value === 'object' && value !== null) {\n    //     insertObjectkeys(value as DrawflowNode['data'], key, key);\n    //   } else {\n    //     const elems = content.querySelectorAll<HTMLInputElement>(`[df-${key}]`);\n\n    //     for (const el of elems) {\n    //       el.value = value as string;\n    //       if (el.isContentEditable) {\n    //         el.innerText = value as string;\n    //       }\n    //     }\n    //   }\n    // });\n\n    // // // TODO: revisar\n    // const insertObjectkeys = (\n    //   _object: DrawflowNode['data'],\n    //   name: string,\n    //   completname: string\n    // ) => {\n    //   const object = _object[name];\n\n    //   if (object === null) return;\n\n    //   if (typeof object === 'object') {\n    //     for (const [key, value] of Object.entries(object)) {\n    //       if (typeof value === 'object') {\n    //         insertObjectkeys(\n    //           object as DrawflowNode['data'],\n    //           key,\n    //           `${completname}-${key}`\n    //         );\n    //       } else {\n    //         const elems = content.querySelectorAll<HTMLInputElement>(\n    //           `[df-${completname}-${key}]`\n    //         );\n\n    //         for (const el of elems) {\n    //           el.value = value as string;\n    //           if (el.isContentEditable) {\n    //             el.innerText = value as string;\n    //           }\n    //         }\n    //       }\n    //     }\n    //   }\n    // };\n    // node.appendChild(inputs);\n    // node.appendChild(content);\n    // node.appendChild(outputs);\n\n    // node.style.setProperty('--top', `${dataNode.pos_y}px`);\n    // node.style.setProperty('--left', `${dataNode.pos_x}px`);\n\n    // node.style.top = `calc(var(--top, 0px) + var(--y, 0px))`;\n    // node.style.left = `calc(var(--left, 0px) + var(--x, 0px))`;\n\n    // parent.appendChild(node);\n\n    // precanvas.appendChild(parent);\n  }\n\n  /**\n   * @param nodeData - DrawflowNode object\n   */\n  addNode(nodeData: Omit<DrawflowNode, 'id'>): DrawflowNode['id'];\n\n  /**\n   * @param name Name of module\n   * @param inputs Number of inputs\n   * @param outputs Number of outputs\n   * @param posx Position on start node left\n   * @param posy Position on start node top\n   * @param className Added classname to de node\n   * @param data Data passed to node\n   * @param html HTML drawn on node or name of register node.\n   * @param typenode Default false, true for Object HTML, vue for vue\n   */\n  addNode(\n    name: DrawflowNode['name'],\n    num_in: number,\n    num_out: number,\n    ele_pos_x: number,\n    ele_pos_y: number,\n    classoverride: string,\n    data: any,\n    html: string,\n    typenode: DrawflowNode['typenode']\n  ): DrawflowNode['id'];\n\n  addNode(\n    ...args:\n      | [Omit<DrawflowNode, 'id'>]\n      | [\n          name: DrawflowNode['name'],\n          num_in: number,\n          num_out: number,\n          ele_pos_x: number,\n          ele_pos_y: number,\n          classoverride: string,\n          data: any,\n          html: string,\n          typenode: DrawflowNode['typenode']\n        ]\n  ): DrawflowNode['id'] {\n    const newNodeId: string | number = this.useuuid\n      ? this.getUuid()\n      : this.nodeId++;\n\n    let json: DrawflowNode;\n\n    if (((s: any[]): s is [Omit<DrawflowNode, 'id'>] => s.length === 1)(args)) {\n      json = { ...args[0], id: newNodeId };\n    } else {\n      const [\n        name,\n        num_in,\n        num_out,\n        ele_pos_x,\n        ele_pos_y,\n        classoverride,\n        data,\n        html,\n        typenode = false,\n      ] = args;\n\n      if (typenode === true && !(html in this.noderegister))\n        throw new RangeError(`node ${html} not found!`);\n\n      const json_inputs: DrawflowNode['inputs'] = {};\n      for (let x = 0; x < num_in; x++) {\n        json_inputs[`input_${x + 1}`] = { connections: [] };\n      }\n\n      const json_outputs: DrawflowNode['outputs'] = {};\n      for (let x = 0; x < num_out; x++) {\n        json_outputs[`output_${x + 1}`] = { connections: [] };\n      }\n\n      json = {\n        id: newNodeId,\n        name,\n        data,\n        class: classoverride,\n        html,\n        typenode,\n        inputs: json_inputs,\n        outputs: json_outputs,\n        pos_x: ele_pos_x,\n        pos_y: ele_pos_y,\n      };\n    }\n\n    if (this.precanvas) this.renderNodeFirstTime(json, this.precanvas);\n    this.drawflow.drawflow[this.module].data[newNodeId] = json;\n    this.dispatch('nodeCreated', newNodeId);\n\n    return newNodeId;\n  }\n\n  private addNodeImport(dataNode: DrawflowNode, precanvas: HTMLElement) {\n    this.renderNodeFirstTime(dataNode, precanvas);\n  }\n\n  private addRerouteImport(dataNode: DrawflowNode) {\n    const reroute_width = this.reroute_width;\n    const reroute_fix_curvature = this.reroute_fix_curvature;\n    const container = this.container;\n    Object.keys(dataNode.outputs).map(function (output_item: any, index) {\n      Object.keys(dataNode.outputs[output_item].connections).map(function (\n        input_item: any,\n        index\n      ) {\n        const points =\n          dataNode.outputs[output_item].connections[input_item].points;\n        if (points !== undefined) {\n          points.forEach((item, i) => {\n            const input_id =\n              dataNode.outputs[output_item].connections[input_item].node;\n            const input_class =\n              dataNode.outputs[output_item].connections[input_item].output;\n            const ele = container.querySelector(\n              '.connection.node_in_node-' +\n                input_id +\n                '.node_out_node-' +\n                dataNode.id +\n                '.' +\n                output_item +\n                '.' +\n                input_class\n            );\n\n            if (reroute_fix_curvature) {\n              if (i === 0) {\n                for (var z = 0; z < points.length; z++) {\n                  var path = document.createElementNS(\n                    'http://www.w3.org/2000/svg',\n                    'path'\n                  );\n                  path.classList.add('main-path');\n                  path.setAttributeNS(null, 'd', '');\n                  ele!.appendChild(path);\n                }\n              }\n            }\n\n            const point = document.createElementNS(\n              'http://www.w3.org/2000/svg',\n              'circle'\n            );\n            point.classList.add('point');\n            var pos_x = item.pos_x;\n            var pos_y = item.pos_y;\n\n            point.setAttributeNS(null, 'cx', pos_x.toString());\n            point.setAttributeNS(null, 'cy', pos_y.toString());\n            point.setAttributeNS(null, 'r', reroute_width.toString());\n\n            ele!.appendChild(point);\n          });\n        }\n      });\n    });\n  }\n\n  private updateNodeValue(event: Event) {\n    var attr = (event.target as HTMLElement).attributes;\n    for (var i = 0; i < attr.length; i++) {\n      if (attr[i].nodeName.startsWith('df-')) {\n        var keys = attr[i].nodeName.slice(3).split('-');\n        var target =\n          this.drawflow.drawflow[this.module].data[\n            (event.target as HTMLElement)\n              .closest('.drawflow_content_node')!\n              .parentElement!.id.slice(5)\n          ].data;\n        for (var index = 0; index < keys.length - 1; index += 1) {\n          if (target[keys[index]] == null) {\n            target[keys[index]] = {};\n          }\n          target = target[keys[index]] as any;\n        }\n        target[keys[keys.length - 1]] = (\n          event.target as HTMLInputElement\n        ).value;\n        if ((event.target as HTMLElement).isContentEditable) {\n          target[keys[keys.length - 1]] = (\n            event.target as HTMLElement\n          ).innerText;\n        }\n        this.dispatch(\n          'nodeDataChanged',\n          (event.target as HTMLElement)\n            .closest('.drawflow_content_node')!\n            .parentElement!.id.slice(5)\n        );\n      }\n    }\n  }\n\n  /**\n   * Update data element. Ex: 5, { name: 'Drawflow' }\n   * @param id\n   * @param data\n   */\n  updateNodeDataFromId(id: string | number, data: any): void {\n    var moduleName = this.getModuleFromNodeId(id);\n    this.drawflow.drawflow[moduleName].data[id].data = data;\n    if (this.module === moduleName) {\n      const content = this.container.querySelector('#node-' + id);\n\n      Object.entries(data).forEach(function (key, value) {\n        if (typeof key[1] === 'object') {\n          insertObjectkeys(null, key[0], key[0]);\n        } else {\n          var elems = content!.querySelectorAll<HTMLInputElement>(\n            '[df-' + key[0] + ']'\n          );\n          for (var i = 0; i < elems.length; i++) {\n            elems[i].value = key[1] as string;\n            if (elems[i].isContentEditable) {\n              elems[i].innerText = key[1] as string;\n            }\n          }\n        }\n      });\n\n      const insertObjectkeys = (\n        object: any,\n        name: string,\n        completname: string\n      ) => {\n        if (object === null) {\n          var object = data[name];\n        } else {\n          var object = object[name];\n        }\n        if (object !== null) {\n          Object.entries(object).forEach(function (key, value) {\n            if (typeof key[1] === 'object') {\n              insertObjectkeys(object, key[0], completname + '-' + key[0]);\n            } else {\n              var elems = content!.querySelectorAll<HTMLInputElement>(\n                '[df-' + completname + '-' + key[0] + ']'\n              );\n              for (var i = 0; i < elems.length; i++) {\n                elems[i].value = key[1] as string;\n                if (elems[i].isContentEditable) {\n                  elems[i].innerText = key[1] as string;\n                }\n              }\n            }\n          });\n        }\n      };\n    }\n  }\n\n  /**\n   * Add input to node. Ex id: 5\n   * @param id\n   */\n  addNodeInput(id: string | number): void {\n    var moduleName = this.getModuleFromNodeId(id);\n    const infoNode = this.getNodeFromId(id);\n    const numInputs = Object.keys(infoNode.inputs).length;\n    if (this.module === moduleName) {\n      //Draw input\n      const input = document.createElement('div');\n      input.classList.add('input');\n      input.classList.add('input_' + (numInputs + 1));\n      const parent = this.container.querySelector('#node-' + id + ' .inputs');\n      parent?.appendChild(input);\n      this.updateConnectionNodes('node-' + id);\n    }\n    this.drawflow.drawflow[moduleName].data[id].inputs[\n      'input_' + (numInputs + 1)\n    ] = { connections: [] };\n  }\n\n  /**\n   * Add output to node. Ex id: 5\n   * @param id\n   */\n  addNodeOutput(id: string | number): void {\n    var moduleName = this.getModuleFromNodeId(id);\n    const infoNode = this.getNodeFromId(id);\n    const numOutputs = Object.keys(infoNode.outputs).length;\n    if (this.module === moduleName) {\n      //Draw output\n      const output = document.createElement('div');\n      output.classList.add('output');\n      output.classList.add('output_' + (numOutputs + 1));\n      const parent = this.container.querySelector('#node-' + id + ' .outputs');\n      parent?.appendChild(output);\n      this.updateConnectionNodes('node-' + id);\n    }\n    this.drawflow.drawflow[moduleName].data[id].outputs[\n      'output_' + (numOutputs + 1)\n    ] = { connections: [] };\n  }\n\n  /**\n   * Remove input to node. Ex id: 5, input_2\n   * @param id\n   * @param input_class\n   */\n  removeNodeInput(id: string | number, input_class: string): void {\n    var moduleName = this.getModuleFromNodeId(id);\n    const infoNode = this.getNodeFromId(id);\n    if (this.module === moduleName) {\n      this.container\n        .querySelector('#node-' + id + ' .inputs .input.' + input_class)\n        ?.remove();\n    }\n    const removeInputs: any[] = [];\n    Object.keys(infoNode.inputs[input_class].connections).map(function (\n      key,\n      index\n    ) {\n      const id_output = infoNode.inputs[input_class].connections[index].node;\n      const output_class =\n        infoNode.inputs[input_class].connections[index].input;\n      removeInputs.push({ id_output, id, output_class, input_class });\n    });\n    // Remove connections\n    removeInputs.forEach((item, i) => {\n      this.removeSingleConnection(\n        item.id_output,\n        item.id,\n        item.output_class,\n        item.input_class\n      );\n    });\n\n    delete this.drawflow.drawflow[moduleName].data[id].inputs[input_class];\n\n    // Update connection\n    const connections: DrawflowConnection[] = [];\n    const connectionsInputs =\n      this.drawflow.drawflow[moduleName].data[id].inputs;\n    Object.keys(connectionsInputs).map(function (key, index) {\n      connections.push(connectionsInputs[key]);\n    });\n    this.drawflow.drawflow[moduleName].data[id].inputs = {};\n    const input_class_id = input_class.slice(6);\n    let nodeUpdates: DrawflowConnectionDetail[] = [];\n    connections.forEach((item, i) => {\n      item.connections.forEach((itemx, f) => {\n        nodeUpdates.push(itemx);\n      });\n      this.drawflow.drawflow[moduleName].data[id].inputs['input_' + (i + 1)] =\n        item;\n    });\n    nodeUpdates = [...new Set(nodeUpdates.map((e) => JSON.stringify(e)))].map(\n      (e) => JSON.parse(e)\n    );\n\n    if (this.module === moduleName) {\n      const eles = this.container.querySelectorAll(\n        '#node-' + id + ' .inputs .input'\n      );\n      eles.forEach((item, i) => {\n        const id_class = item.classList[1].slice(6);\n        if (parseInt(input_class_id) < parseInt(id_class)) {\n          item.classList.remove('input_' + id_class);\n          item.classList.add('input_' + (+id_class - 1));\n        }\n      });\n    }\n\n    nodeUpdates.forEach((itemx, i) => {\n      this.drawflow.drawflow[moduleName].data[itemx.node].outputs[\n        itemx.input!\n      ].connections.forEach((itemz, g) => {\n        if (itemz.node == id) {\n          const output_id = itemz.output!.slice(6);\n          if (parseInt(input_class_id) < parseInt(output_id)) {\n            if (this.module === moduleName) {\n              const ele = this.container.querySelector(\n                '.connection.node_in_node-' +\n                  id +\n                  '.node_out_node-' +\n                  itemx.node +\n                  '.' +\n                  itemx.input +\n                  '.input_' +\n                  output_id\n              );\n              ele!.classList.remove('input_' + output_id);\n              ele!.classList.add('input_' + (+output_id - 1));\n            }\n            if (itemz.points) {\n              this.drawflow.drawflow[moduleName].data[itemx.node].outputs[\n                itemx.input!\n              ].connections[g] = {\n                node: itemz.node,\n                output: 'input_' + (+output_id - 1),\n                points: itemz.points,\n              };\n            } else {\n              this.drawflow.drawflow[moduleName].data[itemx.node].outputs[\n                itemx.input!\n              ].connections[g] = {\n                node: itemz.node,\n                output: 'input_' + (+output_id - 1),\n              };\n            }\n          }\n        }\n      });\n    });\n    this.updateConnectionNodes('node-' + id);\n  }\n\n  /**\n   * Remove output to node. Ex id: 5, output_2\n   * @param id\n   * @param output_class\n   */\n  removeNodeOutput(id: string | number, output_class: string): void {\n    var moduleName = this.getModuleFromNodeId(id);\n    const infoNode = this.getNodeFromId(id);\n    if (this.module === moduleName) {\n      this.container\n        .querySelector(`#node-${id} .outputs .output.${output_class}`)\n        ?.remove();\n    }\n    const removeOutputs: any[] = [];\n    Object.keys(infoNode.outputs[output_class].connections).map(function (\n      key,\n      index\n    ) {\n      const id_input = infoNode.outputs[output_class].connections[index].node;\n      const input_class =\n        infoNode.outputs[output_class].connections[index].output;\n      removeOutputs.push({ id, id_input, output_class, input_class });\n    });\n    // Remove connections\n    removeOutputs.forEach((item, i) => {\n      this.removeSingleConnection(\n        item.id,\n        item.id_input,\n        item.output_class,\n        item.input_class\n      );\n    });\n\n    delete this.drawflow.drawflow[moduleName].data[id].outputs[output_class];\n\n    // Update connection\n    const connections: DrawflowConnection[] = [];\n    const connectionsOuputs =\n      this.drawflow.drawflow[moduleName].data[id].outputs;\n    Object.keys(connectionsOuputs).map(function (key, index) {\n      connections.push(connectionsOuputs[key]);\n    });\n    this.drawflow.drawflow[moduleName].data[id].outputs = {};\n    const output_class_id = output_class.slice(7);\n    let nodeUpdates: DrawflowConnectionDetail[] = [];\n    connections.forEach((item, i) => {\n      item.connections.forEach((itemx, f) => {\n        nodeUpdates.push({ node: itemx.node, output: itemx.output });\n      });\n      this.drawflow.drawflow[moduleName].data[id].outputs['output_' + (i + 1)] =\n        item;\n    });\n    nodeUpdates = [...new Set(nodeUpdates.map((e) => JSON.stringify(e)))].map(\n      (e) => JSON.parse(e)\n    );\n\n    if (this.module === moduleName) {\n      const eles = this.container.querySelectorAll(\n        '#node-' + id + ' .outputs .output'\n      );\n      eles.forEach((item, i) => {\n        const id_class = item.classList[1].slice(7);\n        if (parseInt(output_class_id) < parseInt(id_class)) {\n          item.classList.remove('output_' + id_class);\n          item.classList.add('output_' + (+id_class - 1));\n        }\n      });\n    }\n\n    nodeUpdates.forEach((itemx, i) => {\n      this.drawflow.drawflow[moduleName].data[itemx.node].inputs[\n        itemx.output!\n      ].connections.forEach((itemz, g) => {\n        if (itemz.node == id) {\n          const input_id = itemz.input!.slice(7);\n          if (parseInt(output_class_id) < parseInt(input_id)) {\n            if (this.module === moduleName) {\n              const ele = this.container.querySelector(\n                '.connection.node_in_node-' +\n                  itemx.node +\n                  '.node_out_node-' +\n                  id +\n                  '.output_' +\n                  input_id +\n                  '.' +\n                  itemx.output\n              );\n              ele!.classList.remove('output_' + input_id);\n              ele!.classList.remove(itemx.output!);\n              ele!.classList.add('output_' + (+input_id - 1));\n              ele!.classList.add(itemx.output!);\n            }\n            if (itemz.points) {\n              this.drawflow.drawflow[moduleName].data[itemx.node].inputs[\n                itemx.output!\n              ].connections[g] = {\n                node: itemz.node,\n                input: 'output_' + (+input_id - 1),\n                points: itemz.points,\n              };\n            } else {\n              this.drawflow.drawflow[moduleName].data[itemx.node].inputs[\n                itemx.output!\n              ].connections[g] = {\n                node: itemz.node,\n                input: 'output_' + (+input_id - 1),\n              };\n            }\n          }\n        }\n      });\n    });\n\n    this.updateConnectionNodes('node-' + id);\n  }\n\n  /**\n   * Remove node. Ex id: node-x\n   */\n  removeNodeId(id: string | number): void {\n    this.removeConnectionNodeId(id);\n    var moduleName = this.getModuleFromNodeId(id.toString().slice(5));\n    if (this.module === moduleName) {\n      this.container.querySelector(`#${id}`)?.remove();\n    }\n    delete this.drawflow.drawflow[moduleName].data[id.toString().slice(5)];\n    this.dispatch('nodeRemoved', id.toString().slice(5));\n  }\n\n  private removeConnection() {\n    if (this.connection_selected != null) {\n      var listclass = this.connection_selected!.parentElement!.classList;\n      this.connection_selected.parentElement!.remove();\n      //console.log(listclass);\n      var index_out = this.drawflow.drawflow[this.module].data[\n        listclass[2].slice(14)\n      ].outputs[listclass[3]].connections.findIndex(function (item, i) {\n        return (\n          item.node === listclass[1].slice(13) && item.output === listclass[4]\n        );\n      });\n      this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[\n        listclass[3]\n      ].connections.splice(index_out, 1);\n\n      var index_in = this.drawflow.drawflow[this.module].data[\n        listclass[1].slice(13)\n      ].inputs[listclass[4]].connections.findIndex(function (item, i) {\n        return (\n          item.node === listclass[2].slice(14) && item.input === listclass[3]\n        );\n      });\n      this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[\n        listclass[4]\n      ].connections.splice(index_in, 1);\n      this.dispatch('connectionRemoved', {\n        output_id: listclass[2].slice(14),\n        input_id: listclass[1].slice(13),\n        output_class: listclass[3],\n        input_class: listclass[4],\n      });\n      this.connection_selected = null;\n    }\n  }\n\n  /**\n   * Remove connection. Ex: 15,16,'output_1','input_1'\n   * @param id_output\n   * @param id_input\n   * @param output_class\n   * @param input_class\n   */\n  removeSingleConnection(\n    id_output: string | number,\n    id_input: string | number,\n    output_class: string,\n    input_class: string\n  ): boolean {\n    var nodeOneModule = this.getModuleFromNodeId(id_output);\n    var nodeTwoModule = this.getModuleFromNodeId(id_input);\n    if (nodeOneModule === nodeTwoModule) {\n      // Check nodes in same module.\n\n      // Check connection exist\n      var exists = this.drawflow.drawflow[nodeOneModule].data[\n        id_output\n      ].outputs[output_class].connections.findIndex(function (item, i) {\n        return item.node == id_input && item.output === input_class;\n      });\n      if (exists > -1) {\n        if (this.module === nodeOneModule) {\n          // In same module with view.\n          this.container\n            ?.querySelector(\n              `.connection.node_in_node-${id_input}.node_out_node-${id_output}.${output_class}.${input_class}`\n            )\n            ?.remove();\n        }\n\n        var index_out = this.drawflow.drawflow[nodeOneModule].data[\n          id_output\n        ].outputs[output_class].connections.findIndex(function (item, i) {\n          return item.node == id_input && item.output === input_class;\n        });\n        this.drawflow.drawflow[nodeOneModule].data[id_output].outputs[\n          output_class\n        ].connections.splice(index_out, 1);\n\n        var index_in = this.drawflow.drawflow[nodeOneModule].data[\n          id_input\n        ].inputs[input_class].connections.findIndex(function (item, i) {\n          return item.node == id_output && item.input === output_class;\n        });\n        this.drawflow.drawflow[nodeOneModule].data[id_input].inputs[\n          input_class\n        ].connections.splice(index_in, 1);\n\n        this.dispatch('connectionRemoved', {\n          output_id: id_output,\n          input_id: id_input,\n          output_class: output_class,\n          input_class: input_class,\n        });\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Remove node connections. Ex id: node-x\n   * @param id\n   */\n  removeConnectionNodeId(id: string | number): void {\n    const idSearchIn = 'node_in_' + id;\n    const idSearchOut = 'node_out_' + id;\n\n    const elemsOut = this.container.querySelectorAll(`.${idSearchOut}`);\n    for (var i = elemsOut.length - 1; i >= 0; i--) {\n      var listclass = elemsOut[i].classList;\n\n      var index_in = this.drawflow.drawflow[this.module].data[\n        listclass[1].slice(13)\n      ].inputs[listclass[4]].connections.findIndex(function (item, i) {\n        return (\n          item.node === listclass[2].slice(14) && item.input === listclass[3]\n        );\n      });\n      this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[\n        listclass[4]\n      ].connections.splice(index_in, 1);\n\n      var index_out = this.drawflow.drawflow[this.module].data[\n        listclass[2].slice(14)\n      ].outputs[listclass[3]].connections.findIndex(function (item, i) {\n        return (\n          item.node === listclass[1].slice(13) && item.output === listclass[4]\n        );\n      });\n      this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[\n        listclass[3]\n      ].connections.splice(index_out, 1);\n\n      elemsOut[i].remove();\n\n      this.dispatch('connectionRemoved', {\n        output_id: listclass[2].slice(14),\n        input_id: listclass[1].slice(13),\n        output_class: listclass[3],\n        input_class: listclass[4],\n      });\n    }\n\n    const elemsIn = this.container.querySelectorAll(`.${idSearchIn}`);\n    for (var i = elemsIn.length - 1; i >= 0; i--) {\n      var listclass = elemsIn[i].classList;\n\n      var index_out = this.drawflow.drawflow[this.module].data[\n        listclass[2].slice(14)\n      ].outputs[listclass[3]].connections.findIndex(function (item, i) {\n        return (\n          item.node === listclass[1].slice(13) && item.output === listclass[4]\n        );\n      });\n      this.drawflow.drawflow[this.module].data[listclass[2].slice(14)].outputs[\n        listclass[3]\n      ].connections.splice(index_out, 1);\n\n      var index_in = this.drawflow.drawflow[this.module].data[\n        listclass[1].slice(13)\n      ].inputs[listclass[4]].connections.findIndex(function (item, i) {\n        return (\n          item.node === listclass[2].slice(14) && item.input === listclass[3]\n        );\n      });\n      this.drawflow.drawflow[this.module].data[listclass[1].slice(13)].inputs[\n        listclass[4]\n      ].connections.splice(index_in, 1);\n\n      elemsIn[i].remove();\n\n      this.dispatch('connectionRemoved', {\n        output_id: listclass[2].slice(14),\n        input_id: listclass[1].slice(13),\n        output_class: listclass[3],\n        input_class: listclass[4],\n      });\n    }\n  }\n\n  /**\n   * Get name of module where is the id. Ex id: 5\n   * @param id\n   */\n  getModuleFromNodeId(id: string | number): string {\n    let nameModule: string = '';\n\n    for (const [moduleName, { data }] of Object.entries(\n      this.drawflow.drawflow\n    )) {\n      if (Object.hasOwn(data, id.toString())) {\n        nameModule = moduleName;\n        break;\n      }\n    }\n\n    // TODO: refactor\n    // Object.keys(editor).map((moduleName) => {\n    //   Object.keys(editor[moduleName].data).map((node) => {\n    //     if (node == id) {\n    //       nameModule = moduleName;\n    //     }\n    //   });\n    // });\n\n    return nameModule;\n  }\n\n  addModule(name: string): void {\n    this.drawflow.drawflow[name] = { data: {} };\n    this.dispatch('moduleCreated', name);\n  }\n\n  changeModule(name: string): void {\n    this.dispatch('moduleChanged', name);\n    this.module = name;\n    this.precanvas!.innerHTML = '';\n    this.canvas_x = 0;\n    this.canvas_y = 0;\n    this.pos_x = 0;\n    this.pos_y = 0;\n    this.mouse_x = 0;\n    this.mouse_y = 0;\n    this.zoom = 1;\n    this.zoom_last_value = 1;\n    this.precanvas!.style.transform = '';\n    this.import(this.drawflow, false);\n  }\n\n  removeModule(name: string): void {\n    if (this.module === name) {\n      this.changeModule('Home');\n    }\n    delete this.drawflow.drawflow[name];\n    this.dispatch('moduleRemoved', name);\n  }\n\n  /**\n   * Clear data of module selected\n   */\n  clearModuleSelected(): void {\n    this.precanvas!.innerHTML = '';\n    this.drawflow.drawflow[this.module] = { data: {} };\n  }\n\n  /**\n   * Clear all data of all modules and modules remove.\n   */\n  clear(): void {\n    this.precanvas!.innerHTML = '';\n    this.drawflow = { drawflow: { Home: { data: {} } } };\n  }\n  export(): DrawflowExport {\n    const dataExport = JSON.parse(JSON.stringify(this.drawflow));\n    this.dispatch('export', dataExport);\n    return dataExport;\n  }\n\n  /**\n   *\n   * @param data\n   * @param notifi - default to true\n   */\n  import(data: DrawflowExport, notifi: boolean = true): void {\n    this.clear();\n    this.drawflow = JSON.parse(JSON.stringify(data));\n    this.load();\n    if (notifi) {\n      this.dispatch('import', 'import');\n    }\n  }\n\n  // /* Events */\n  /**\n   *\n   * @param eventName\n   * @param callback (event: id of Node)\n   */\n  on(eventName: 'nodeCreated', callback: (event: number) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: id of Node)\n   */\n  on(eventName: 'nodeRemoved', callback: (event: number) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: id of Node)\n   */\n  on(eventName: 'nodeSelected', callback: (event: number) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: true)\n   */\n  on(eventName: 'nodeUnselected', callback: (event: boolean) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback\n   */\n  on(eventName: 'nodeMoved', callback: (event: any) => void): void;\n  /**\n   * Called when starting to create a connection\n   * @param eventName\n   * @param callback\n   */\n  on(\n    eventName: 'connectionStart',\n    callback: (event: ConnectionStartEvent) => void\n  ): void;\n  /**\n   * Called when the connection creation was canceled\n   * @param eventName\n   * @param callback (event: true)\n   */\n  on(eventName: 'connectionCancel', callback: (event: boolean) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: id's of nodes and output/input selected)\n   */\n  on(\n    eventName: 'connectionCreated',\n    callback: (event: ConnectionEvent) => void\n  ): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: id's of nodes and output/input selected)\n   */\n  on(\n    eventName: 'connectionRemoved',\n    callback: (event: ConnectionEvent) => void\n  ): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: id's of nodes and output/input selected)\n   */\n  on(\n    eventName: 'connectionSelected',\n    callback: (event: ConnectionEvent) => void\n  ): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: true)\n   */\n  on(\n    eventName: 'connectionUnselected',\n    callback: (event: boolean) => void\n  ): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: id of Node output)\n   */\n  on(eventName: 'addReroute', callback: (event: number) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: id of Node output)\n   */\n  on(eventName: 'removeReroute', callback: (event: number) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: name of Module)\n   */\n  on(eventName: 'moduleCreated', callback: (event: string) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: name of Module)\n   */\n  on(eventName: 'moduleChanged', callback: (event: string) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: name of Module)\n   */\n  on(eventName: 'moduleRemoved', callback: (event: string) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: mouse event)\n   */\n  on(eventName: 'click', callback: (event: MouseEvent) => void): void;\n  /**\n   * Once the click changes have been made\n   * @param eventName\n   * @param callback\n   */\n  on(eventName: 'clickEnd', callback: (event: any) => void): void;\n  /**\n   * Click second button mouse event\n   * @param eventName\n   * @param callback\n   */\n  on(eventName: 'contextmenu', callback: (event: any) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: position)\n   */\n  on(\n    eventName: 'mouseMove',\n    callback: (event: MousePositionEvent) => void\n  ): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: keyboard event)\n   */\n  on(eventName: 'keydown', callback: (event: KeyboardEvent) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: Level of zoom)\n   */\n  on(eventName: 'zoom', callback: (event: any) => void): void;\n  /**\n   *\n   * @param eventName\n   * @param callback (event: position)\n   */\n  on(\n    eventName: 'translate',\n    callback: (event: MousePositionEvent) => void\n  ): void;\n  /**\n   * Finish import\n   * @param eventName\n   * @param callback\n   */\n  on(eventName: 'import', callback: (event: any) => void): void;\n  /**\n   * Data export\n   * @param eventName\n   * @param callback\n   */\n  on(eventName: 'export', callback: (event: any) => void): void;\n  on(event: string, callback: (event: any) => void): boolean | void {\n    // Check if the callback is not a function\n    if (typeof callback !== 'function') {\n      console.error(\n        `The listener callback must be a function, the given type is ${typeof callback}`\n      );\n      return false;\n    }\n    // Check if the event is not a string\n    if (typeof event !== 'string') {\n      console.error(\n        `The event name must be a string, the given type is ${typeof event}`\n      );\n      return false;\n    }\n    // Check if this event not exists\n    if (this.events[event] === undefined) {\n      this.events[event] = {\n        listeners: [],\n      };\n    }\n    this.events[event].listeners.push(callback);\n  }\n\n  removeListener(event: string, callback: any): boolean | void {\n    // Check if this event not exists\n\n    if (!this.events[event]) return false;\n\n    const listeners = this.events[event].listeners;\n    const listenerIndex = listeners.indexOf(callback);\n    const hasListener = listenerIndex > -1;\n    if (hasListener) listeners.splice(listenerIndex, 1);\n  }\n\n  private dispatch(event: string, details: any): boolean | void {\n    // Check if this event not exists\n    if (this.events[event] === undefined) {\n      // console.error(`This event: ${event} does not exist`);\n      return false;\n    }\n    this.events[event].listeners.forEach((listener) => {\n      listener(details);\n    });\n  }\n\n  getUuid(): string {\n    return uuid();\n    // // http://www.ietf.org/rfc/rfc4122.txt\n    // var s: string[] = [];\n    // var hexDigits = '0123456789abcdef';\n    // for (var i = 0; i < 36; i++) {\n    //   s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    // }\n    // s[14] = '4'; // bits 12-15 of the time_hi_and_version field to 0010\n    // s[19] = hexDigits.substr(((s[19] as unknown as number) & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01\n    // s[8] = s[13] = s[18] = s[23] = '-';\n\n    // var uuid = s.join('');\n    // return uuid;\n  }\n\n  getElementOfNode(nodeId: DrawflowNode['id']): HTMLElement | null {\n    return (\n      this.precanvas?.querySelector<HTMLElement>(`#node-${nodeId}`) ?? null\n    );\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAGA,IAAI;AACJ,IAAM,QAAQ,IAAI,WAAW,EAAE;AAChB,SAAR,MAAuB;AAE5B,MAAI,CAAC,iBAAiB;AAEpB,sBAAkB,OAAO,WAAW,eAAe,OAAO,mBAAmB,OAAO,gBAAgB,KAAK,MAAM;AAE/G,QAAI,CAAC,iBAAiB;AACpB,YAAM,IAAI,MAAM,0GAA0G;AAAA,IAC5H;AAAA,EACF;AAEA,SAAO,gBAAgB,KAAK;AAC9B;;;ACXA,IAAM,YAAY,CAAC;AAEnB,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,YAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;AAClD;AAEO,SAAS,gBAAgB,KAAK,SAAS,GAAG;AAG/C,UAAQ,UAAU,IAAI,SAAS,MAAM,UAAU,IAAI,SAAS,MAAM,UAAU,IAAI,SAAS,MAAM,UAAU,IAAI,SAAS,MAAM,MAAM,UAAU,IAAI,SAAS,MAAM,UAAU,IAAI,SAAS,MAAM,MAAM,UAAU,IAAI,SAAS,MAAM,UAAU,IAAI,SAAS,MAAM,MAAM,UAAU,IAAI,SAAS,MAAM,UAAU,IAAI,SAAS,MAAM,MAAM,UAAU,IAAI,SAAS,OAAO,UAAU,IAAI,SAAS,OAAO,UAAU,IAAI,SAAS,OAAO,UAAU,IAAI,SAAS,OAAO,UAAU,IAAI,SAAS,OAAO,UAAU,IAAI,SAAS,MAAM,YAAY;AACngB;;;AChBA,IAAM,aAAa,OAAO,WAAW,eAAe,OAAO,cAAc,OAAO,WAAW,KAAK,MAAM;AACtG,IAAO,iBAAQ;AAAA,EACb;AACF;;;ACCA,SAAS,GAAG,SAAS,KAAK,QAAQ;AAChC,MAAI,eAAO,cAAc,CAAC,OAAO,CAAC,SAAS;AACzC,WAAO,eAAO,WAAW;AAAA,EAC3B;AAEA,YAAU,WAAW,CAAC;AACtB,QAAM,OAAO,QAAQ,WAAW,QAAQ,OAAO,KAAK;AAEpD,OAAK,KAAK,KAAK,KAAK,KAAO;AAC3B,OAAK,KAAK,KAAK,KAAK,KAAO;AAE3B,MAAI,KAAK;AACP,aAAS,UAAU;AAEnB,aAAS,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AAC3B,UAAI,SAAS,KAAK,KAAK;AAAA,IACzB;AAEA,WAAO;AAAA,EACT;AAEA,SAAO,gBAAgB,IAAI;AAC7B;AAEA,IAAO,aAAQ;;;ACbR,IAAM,iBAAiB,CAAC,cAA2C;AACxE,QAAM,WAAW,SAAS,cAAc,UAAU;AAClD,WAAS,YAAY;AACrB,SAAO;AACT;AAEO,IAAM,OAAO,CAAC,YAAkC,WACrD,OAAO,IAAI,EAAE,KAAK,QAAQ,GAAG,GAAG,MAAM;AAExC,IAAM,oBAAoB,SAAS,cAAc,UAAU;AAC3D,kBAAkB,YAAY;AAzB9B;AA2BO,IAAM,WAAN,MAAoC;AAAA,EA+KzC,YACmB,WACA,QACA,QACjB;AAHiB;AACA;AACA;AAjLnB,SAAQ,SAGJ,CAAC;AACL,SAAQ,SAAiB;AACzB,SAAU,YAAgC;AAC1C,SAAQ,eAAmC;AAC3C,SAAU,gBAAoC;AAC9C,SAAQ,OAAgB;AAExB,SAAQ,WAAmB;AAW3B,SAAQ,WAAmB;AAe3B,mBAAmB;AAMnB,iCAAiC;AAMjC,qBAAoB;AAMpB,uCAAsC;AAMtC,6BAA4B;AAM5B,yBAAwB;AACxB,SAAQ,aAAsB;AAC9B,SAAQ,kBAA2B;AACnC,SAAQ,aAAsB;AAC9B,SAAQ,iBAAkD;AAC1D,SAAU,sBAAuD;AAKjE,oBAAmB;AAKnB,oBAAmB;AACnB,SAAQ,QAAgB;AACxB,SAAQ,cAAsB;AAC9B,SAAQ,QAAgB;AACxB,SAAQ,cAAsB;AAC9B,SAAQ,UAAkB;AAC1B,SAAQ,UAAkB;AAM1B,qBAAoB;AACpB,uBAAkC;AAMlC,6BAA6B;AAM7B,4BAA4B;AAE5B,mBAAmB;AAEnB,SAAQ,eAOJ,CAAC;AAKL,oBAA2B,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE;AAE9D,SAAQ,SAAS;AAUjB,qCAAmC;AAanC,gBAAe;AAMf,oBAAmB;AAKnB,oBAAmB;AAKnB,sBAAqB;AAKrB,2BAA0B;AAG1B,SAAQ,UAAU,IAAI,MAAM;AAC5B,SAAQ,WAAW;AAAA,EAMhB;AAAA,EAtKH,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,QAAQ,KAAa;AA5C3B;AA6CI,SAAK,WAAW;AAChB,eAAK,cAAL,mBAAgB,MAAM,YAAY,OAAO,GAAG;AAAA,EAC9C;AAAA,EAIA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,QAAQ,KAAa;AAvD3B;AAwDI,SAAK,WAAW;AAChB,eAAK,cAAL,mBAAgB,MAAM,YAAY,OAAO,GAAG;AAAA,EAC9C;AAAA,EAgGA,IAAI,gBAAgB;AAClB,WAAO,KAAK;AAAA,EACd;AAAA,EAOA,IAAI,YAAY,MAA0B;AACxC,uBAAK,cAAe;AACpB,QAAI,KAAK;AAAW,WAAK,UAAU,QAAQ,OAAO;AAAA,EACpD;AAAA,EACA,IAAI,cAAc;AAChB,WAAO,mBAAK;AAAA,EACd;AAAA,EAuCA,QAAQ;AAEN,SAAK,UAAU,UAAU,IAAI,iBAAiB;AAE9C,SAAK,UAAU,WAAW;AAE1B,SAAK,YAAY,SAAS,cAAc,KAAK;AAC7C,YAAQ,eAAe,MAAM,aAAa,EAAE,UAAU,MAAM,CAAC;AAC7D,SAAK,UAAU,UAAU,IAAI,UAAU;AAGvC,SAAK,UAAU,KAAK;AACpB,SAAK,UAAU,KAAK;AACpB,SAAK,cAAc,KAAK;AAGxB,SAAK,UAAU,YAAY,KAAK,SAAS;AAGzC,SAAK,UAAU,iBAAiB,WAAW,KAAK,QAAQ,KAAK,IAAI,CAAC;AAClE,SAAK,UAAU,iBAAiB,aAAa,KAAK,SAAS,KAAK,IAAI,CAAC;AACrE,SAAK,UAAU,iBAAiB,aAAa,KAAK,MAAM,KAAK,IAAI,CAAC;AAElE,SAAK,UAAU,iBAAiB,YAAY,KAAK,QAAQ,KAAK,IAAI,CAAC;AACnE,SAAK,UAAU,iBAAiB,aAAa,KAAK,SAAS,KAAK,IAAI,CAAC;AACrE,SAAK,UAAU,iBAAiB,cAAc,KAAK,MAAM,KAAK,IAAI,CAAC;AAGnE,SAAK,UAAU,iBAAiB,eAAe,KAAK,YAAY,KAAK,IAAI,CAAC;AAE1E,SAAK,UAAU,iBAAiB,WAAW,KAAK,IAAI,KAAK,IAAI,CAAC;AAG9D,SAAK,UAAU,iBAAiB,SAAS,KAAK,WAAW,KAAK,IAAI,CAAC;AAEnE,SAAK,UAAU,iBAAiB,SAAS,KAAK,gBAAgB,KAAK,IAAI,CAAC;AAExE,SAAK,UAAU,iBAAiB,YAAY,KAAK,SAAS,KAAK,IAAI,CAAC;AAGpE,SAAK,UAAU;AAAA,MACb;AAAA,MACA,KAAK,oBAAoB,KAAK,IAAI;AAAA,IACpC;AAEA,SAAK,UAAU;AAAA,MACb;AAAA,MACA,KAAK,oBAAoB,KAAK,IAAI;AAAA,IACpC;AAEA,SAAK,UAAU;AAAA,MACb;AAAA,MACA,KAAK,kBAAkB,KAAK,IAAI;AAAA,IAClC;AAEA,SAAK,UAAU;AAAA,MACb;AAAA,MACA,KAAK,kBAAkB,KAAK,IAAI;AAAA,IAClC;AAGA,SAAK,UAAU;AAAA,MACb;AAAA,MACA,KAAK,kBAAkB,KAAK,IAAI;AAAA,IAClC;AAEA,SAAK,KAAK;AAAA,EACZ;AAAA,EAGQ,oBAAoB,IAAkB;AAC5C,SAAK,QAAQ,KAAK,EAAE;AAAA,EACtB;AAAA,EAEQ,oBAAoB,IAAkB;AAC5C,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,UAAI,GAAG,aAAa,KAAK,QAAQ,GAAG,WAAW;AAC7C,aAAK,QAAQ,KAAK;AAClB;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,QAAQ,UAAU,GAAG;AAE5B,UAAI,UAAU,KAAK,IAAI,KAAK,QAAQ,GAAG,UAAU,KAAK,QAAQ,GAAG,OAAO;AAExE,UAAI,KAAK,WAAW,KAAK;AACvB,YAAI,UAAU,KAAK,UAAU;AAG3B,eAAK,QAAQ;AAAA,QACf;AACA,YAAI,UAAU,KAAK,UAAU;AAE3B,eAAK,SAAS;AAAA,QAChB;AAAA,MACF;AACA,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AAAA,EAEQ,kBAAkB,IAAkB;AAC1C,SAAK,aAAa,EAAE;AACpB,QAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AAAA,EAEQ,aAAa,IAAkB;AAErC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,UAAI,KAAK,QAAQ,GAAG,aAAa,GAAG,WAAW;AAC7C,aAAK,QAAQ,OAAO,GAAG,CAAC;AACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,OAAa;AACX,QAAI,CAAC,KAAK;AAAW,YAAM,IAAI,MAAM,kCAAkC;AAEvE,eAAW,QAAQ,OAAO;AAAA,MACxB,KAAK,SAAS,SAAS,KAAK,QAAQ;AAAA,IACtC,GAAG;AACD,WAAK,cAAc,MAAM,KAAK,SAAS;AAAA,IACzC;AAEA,QAAI,KAAK,SAAS;AAChB,iBAAW,QAAQ,OAAO;AAAA,QACxB,KAAK,SAAS,SAAS,KAAK,QAAQ;AAAA,MACtC,GAAG;AACD,aAAK,iBAAiB,IAAI;AAAA,MAC5B;AAAA,IACF;AAEA,aAAS,OAAO,KAAK,SAAS,SAAS,KAAK,QAAQ,MAAM;AACxD,WAAK,sBAAsB,UAAU,GAAG;AAAA,IAC1C;AAEA,UAAM,SAAS,KAAK,SAAS;AAC7B,QAAI,SAAS;AACb,WAAO,KAAK,MAAM,EAAE,IAAI,SAAU,YAAY,OAAO;AACnD,aAAO,KAAK,OAAO,YAAY,IAAI,EAAE,IAAI,SAAU,IAAI,QAAQ;AAC7D,YAAI,SAAS,EAAE,KAAK,QAAQ;AAC1B,mBAAS,SAAS,EAAE,IAAI;AAAA,QAC1B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,SAAK,SAAS;AAAA,EAChB;AAAA,EAEQ,iCAAiC;AAvW3C;AAwWI,SAAK,SAAS,wBAAwB,IAAI;AAC1C,QAAI,KAAK,uBAAuB;AAC9B,uBAAK,wBAAL,mBAA0B,kBAA1B,mBACI,iBAAiB,cAClB,QAAQ,CAAC,MAAM,MAAM;AACpB,aAAK,UAAU,OAAO,UAAU;AAAA,MAClC;AAAA,IACJ;AAAA,EACF;AAAA,EAEQ,MAAM,GAA4C;AAlX5D;AAmXI,SAAK,SAAS,SAAS,CAAC;AACxB,UAAM,SAAS,EAAE;AAEjB,QAAI,KAAK,gBAAgB,SAAS;AAEhC,QAAE,eAAe;AAEjB,UACE,OAAO,UAAU,OAAO,qBACxB,OAAO,UAAU,OAAO,YACxB;AACA,aAAK,eAAe,OAAO,QAAQ,kBAAkB;AAAA,MACvD,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF,WAAW,KAAK,gBAAgB,QAAQ;AACtC,UACE,OAAO,QAAQ,WAAW,KAAK,QAC/B,OAAO,QAAQ,kBAAkB,GACjC;AACA,aAAK,eAAe,OAAO,QAAQ,kBAAkB;AACrD,UAAE,eAAe;AAAA,MACnB;AAAA,IACF,OAAO;AACL,WAAK,cAAc,EAAE;AACrB,WAAK,eAAe,EAAE;AACtB,UAAK,EAAiB,WAAW,GAAG;AAClC,aAAK,eAAe;AAAA,MACtB;AAEA,UAAI,OAAO,QAAQ,wBAAwB,KAAK,MAAM;AACpD,aAAK,gBACH,kBAAO,QAAQ,wBAAwB,MAAvC,mBAA0C,kBAA1C,YAA2D;AAAA,MAC/D;AAAA,IACF;AACA,aAAQ,UAAK,iBAAL,mBAAmB,UAAU,IAAI;AAAA,MACvC,KAAK;AACH,YAAI,KAAK,iBAAiB,MAAM;AAC9B,eAAK,cAAc,UAAU,OAAO,UAAU;AAC9C,cAAI,KAAK,iBAAiB,KAAK,cAAc;AAC3C,iBAAK,SAAS,kBAAkB,IAAI;AAAA,UACtC;AAAA,QACF;AACA,YAAI,KAAK,uBAAuB,MAAM;AACpC,eAAK,oBAAoB,UAAU,OAAO,UAAU;AACpD,eAAK,+BAA+B;AACpC,eAAK,sBAAsB;AAAA,QAC7B;AACA,YAAI,KAAK,iBAAiB,KAAK,cAAc;AAC3C,eAAK,SAAS,gBAAgB,KAAK,aAAa,GAAG,MAAM,CAAC,CAAC;AAAA,QAC7D;AACA,aAAK,gBAAgB,KAAK;AAC1B,aAAK,cAAc,UAAU,IAAI,UAAU;AAC3C,YAAI,CAAC,KAAK,kBAAkB;AAC1B,cACE,OAAO,YAAY,WACnB,OAAO,YAAY,cACnB,OAAO,YAAY,YACnB,OAAO,aAAa,iBAAiB,MAAM,MAC3C;AACA,iBAAK,OAAO;AAAA,UACd;AAAA,QACF,OAAO;AACL,cAAI,OAAO,YAAY,UAAU;AAC/B,iBAAK,OAAO;AAAA,UACd;AAAA,QACF;AACA;AAAA,MACF,KAAK;AACH,aAAK,aAAa;AAClB,YAAI,KAAK,iBAAiB,MAAM;AAC9B,eAAK,cAAc,UAAU,OAAO,UAAU;AAC9C,eAAK,gBAAgB;AACrB,eAAK,SAAS,kBAAkB,IAAI;AAAA,QACtC;AACA,YAAI,KAAK,uBAAuB,MAAM;AACpC,eAAK,oBAAoB,UAAU,OAAO,UAAU;AACpD,eAAK,+BAA+B;AACpC,eAAK,sBAAsB;AAAA,QAC7B;AACA,aAAK,eAAe,EAAE,MAAiB;AACvC;AAAA,MACF,KAAK;AACH,YAAI,KAAK,iBAAiB,MAAM;AAC9B,eAAK,cAAc,UAAU,OAAO,UAAU;AAC9C,eAAK,gBAAgB;AACrB,eAAK,SAAS,kBAAkB,IAAI;AAAA,QACtC;AACA,YAAI,KAAK,uBAAuB,MAAM;AACpC,eAAK,oBAAoB,UAAU,OAAO,UAAU;AACpD,eAAK,+BAA+B;AACpC,eAAK,sBAAsB;AAAA,QAC7B;AACA,aAAK,kBAAkB;AACvB;AAAA,MACF,KAAK;AACH,YAAI,KAAK,iBAAiB,MAAM;AAC9B,eAAK,cAAc,UAAU,OAAO,UAAU;AAC9C,eAAK,gBAAgB;AACrB,eAAK,SAAS,kBAAkB,IAAI;AAAA,QACtC;AACA,YAAI,KAAK,uBAAuB,MAAM;AACpC,eAAK,oBAAoB,UAAU,OAAO,UAAU;AACpD,eAAK,+BAA+B;AACpC,eAAK,sBAAsB;AAAA,QAC7B;AACA,aAAK,kBAAkB;AACvB;AAAA,MACF,KAAK;AACH,YAAI,KAAK,iBAAiB,MAAM;AAC9B,eAAK,cAAc,UAAU,OAAO,UAAU;AAC9C,eAAK,gBAAgB;AACrB,eAAK,SAAS,kBAAkB,IAAI;AAAA,QACtC;AACA,YAAI,KAAK,uBAAuB,MAAM;AACpC,eAAK,oBAAoB,UAAU,OAAO,UAAU;AACpD,eAAK,+BAA+B;AACpC,eAAK,sBAAsB;AAAA,QAC7B;AACA,aAAK,sBAAsB,KAAK;AAChC,aAAK,oBAAoB,UAAU,IAAI,UAAU;AACjD,cAAM,uBACJ,sBAAK,wBAAL,mBAA0B,kBAA1B,mBAAyC,cAAzC,YAAsD,CAAC;AACzD,YAAI,oBAAoB,SAAS,GAAG;AAClC,eAAK,SAAS,sBAAsB;AAAA,YAClC,WAAW,oBAAoB,GAAG,MAAM,EAAE;AAAA,YAC1C,UAAU,oBAAoB,GAAG,MAAM,EAAE;AAAA,YACzC,cAAc,oBAAoB;AAAA,YAClC,aAAa,oBAAoB;AAAA,UACnC,CAAC;AACD,cAAI,KAAK,uBAAuB;AAC9B,6BAAK,wBAAL,mBAA0B,kBAA1B,mBACI,iBAAiB,cAClB,QAAQ,CAAC,MAAM,MAAM;AACpB,mBAAK,UAAU,IAAI,UAAU;AAAA,YAC/B;AAAA,UACJ;AAAA,QACF;AACA;AAAA,MACF,KAAK;AACH,aAAK,aAAa;AAClB,aAAK,aAAa,UAAU,IAAI,UAAU;AAC1C;AAAA,MACF,KAAK;AACH,YAAI,KAAK,eAAe;AACtB,eAAK,aAAa,KAAK,cAAc,EAAE;AAAA,QACzC;AAEA,YAAI,KAAK,qBAAqB;AAC5B,eAAK,iBAAiB;AAAA,QACxB;AAEA,YAAI,KAAK,iBAAiB,MAAM;AAC9B,eAAK,cAAc,UAAU,OAAO,UAAU;AAC9C,eAAK,gBAAgB;AACrB,eAAK,SAAS,kBAAkB,IAAI;AAAA,QACtC;AACA,YAAI,KAAK,uBAAuB,MAAM;AACpC,eAAK,oBAAoB,UAAU,OAAO,UAAU;AACpD,eAAK,+BAA+B;AACpC,eAAK,sBAAsB;AAAA,QAC7B;AAEA;AAAA,MACF;AAAA,IACF;AACA,QAAI,EAAE,SAAS,cAAc;AAC3B,WAAK,QAAS,EAAiB,QAAQ,GAAG;AAC1C,WAAK,cAAe,EAAiB,QAAQ,GAAG;AAChD,WAAK,QAAS,EAAiB,QAAQ,GAAG;AAC1C,WAAK,cAAe,EAAiB,QAAQ,GAAG;AAChD,WAAK,UAAW,EAAiB,QAAQ,GAAG;AAC5C,WAAK,UAAW,EAAiB,QAAQ,GAAG;AAAA,IAC9C,OAAO;AACL,WAAK,QAAS,EAAiB;AAC/B,WAAK,cAAe,EAAiB;AACrC,WAAK,QAAS,EAAiB;AAC/B,WAAK,cAAe,EAAiB;AAAA,IACvC;AACA,QACE,CAAC,SAAS,UAAU,WAAW,EAAE;AAAA,OAC/B,sBAAK,iBAAL,mBAAmB,cAAnB,mBAA+B,OAA/B,YAAqC;AAAA,IACvC,GACA;AACA,QAAE,eAAe;AAAA,IACnB;AACA,SAAK,SAAS,YAAY,CAAC;AAAA,EAC7B;AAAA,EAEA,mBACE,IACA,GACA,GACA,SAAiB,KAAK,QACtB;AACA,UAAM,eAAe,KAAK,UAAW;AAAA,MACnC,SAAS;AAAA,IACX;AACA,iBAAa,MAAM,YAAY,SAAS,GAAG,KAAK;AAChD,iBAAa,MAAM,YAAY,UAAU,GAAG,KAAK;AAEjD,SAAK,SAAS,SAAS,QAAQ,KAAK,IAAI,QAAQ;AAChD,SAAK,SAAS,SAAS,QAAQ,KAAK,IAAI,QAAQ;AAEhD,SAAK,sBAAsB,QAAQ,IAAI;AAAA,EACzC;AAAA,EAEQ,SAAS,GAA4B;AAC3C,UAAM,EAAE,SAAS,SAAS,SAAS,QAAQ,IACzC,aAAa,aAAa,IAAI,EAAE,QAAQ;AAE1C,QAAI,KAAK,YAAY;AACnB,WAAK,iBAAiB,SAAS,OAAO;AAAA,IACxC;AAEA,QAAI,KAAK,iBAAiB;AACxB,YAAM,IAAI,KAAK,WAAW,EAAE,KAAK,QAAQ;AACzC,YAAM,IAAI,KAAK,WAAW,EAAE,KAAK,QAAQ;AACzC,WAAK,SAAS,aAAa,EAAE,GAAM,EAAK,CAAC;AACzC,WAAK,UAAU;AACf,WAAK,UAAU;AAAA,IACjB,WAAW,KAAK,QAAQ,KAAK,cAAc;AACzC,QAAE,eAAe;AAEjB,YAAM,EAAE,WAAW,YAAY,GAAG,IAAI,KAAK;AAE3C,YAAM,IAAI,cAAc,KAAK,QAAQ,WAAW,KAAK,OAAO,KAAK;AACjE,YAAM,IAAI,aAAa,KAAK,QAAQ,WAAW,KAAK,OAAO,KAAK;AAEhE,WAAK,QAAQ;AACb,WAAK,QAAQ;AAEb,WAAK,aAAa,MAAM,YAAY,SAAS,GAAG,KAAK;AACrD,WAAK,aAAa,MAAM,YAAY,UAAU,GAAG,KAAK;AAEtD,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,GAAG,MAAM,CAAC,GAAG,QAAQ;AAC9D,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,GAAG,MAAM,CAAC,GAAG,QAAQ;AAE9D,WAAK,sBAAsB,EAAE;AAAA,IAC/B,WAAW,KAAK,YAAY;AAC1B,cAAQ,IAAI,YAAY;AAQxB,WAAK,QAAQ;AACb,WAAK,QAAQ;AAEb,YAAM,EAAE,GAAG,EAAE,IAAI,KAAK,UAAW,sBAAsB;AACvD,YAAM,EAAE,aAAa,aAAa,IAAI,KAAK;AAE3C,YAAM,QAAS,IAAI,KAAK,QAAS,KAAK,QAAQ;AAC9C,YAAM,QAAS,IAAI,KAAK,QAAS,KAAK,QAAQ;AAK9C,WAAK,aAAc,aAAa,MAAM,MAAM,SAAS,CAAC;AACtD,WAAK,aAAc,aAAa,MAAM,MAAM,SAAS,CAAC;AAEtD,YAAM,aACJ,KAAK,aAAc,cAAe,UAAU,GAAG,MAAM,CAAC;AACxD,YAAM,eACJ,KAAK,aAAc,cAAe,UAAU,GAAG,MAAM,EAAE;AACzD,YAAM,eAAe,KAAK,aAAc,cAAe,UAAU;AACjE,YAAM,cAAc,KAAK,aAAc,cAAe,UAAU;AAEhE,UAAI,sBACF,MAAM,KAAK,KAAK,aAAc,cAAe,QAAQ,EAAE;AAAA,QACrD,KAAK;AAAA,MACP,IAAI;AAEN,UAAI,KAAK,uBAAuB;AAC9B,cAAM,iBACJ,KAAK,aAAc,cAAe,iBAAiB,YAAY,EAC5D,SAAS;AACd,+BAAuB;AACvB,YAAI,sBAAsB,GAAG;AAC3B,gCAAsB;AAAA,QACxB;AAAA,MACF;AAEA,YAAM,SAAS,WAAW,MAAM,CAAC;AACjC,YAAM,mBAAmB,KAAK,SAAS,SAAS,KAAK,QAAQ,KAC3D,QACA,QAAQ,cAAc,YAAY;AAAA,QAClC,CAAC,SAAS,KAAK,SAAS,gBAAgB,KAAK,WAAW;AAAA,MAC1D;AAEA,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,QAAQ,QAC/C,cACA,YAAY,kBAAkB,OAAQ,uBAAuB;AAAA,QAC7D;AAAA,QACA;AAAA,MACF;AAEA,YAAM,iBACJ,KAAK,aAAc,cAAe,UAAU,GAAG,MAAM,CAAC;AAExD,WAAK,sBAAsB,cAAc;AAAA,IAC3C;AAEA,QAAI,EAAE,SAAS,aAAa;AAC1B,WAAK,UAAU;AACf,WAAK,UAAU;AAAA,IACjB;AACA,SAAK,SAAS,aAAa,EAAE,GAAG,SAAS,GAAG,QAAQ,CAAC;AAAA,EACvD;AAAA,EAEQ,QAAQ,GAA4B;AA3qB9C;AA4qBI,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,EAAE,SAAS,YAAY;AACzB,gBAAU,KAAK;AACf,gBAAU,KAAK;AACf,iBAAW,SAAS,iBAAiB,SAAS,OAAO;AAAA,IACvD,OAAO;AACL,gBAAW,EAAiB;AAC5B,gBAAW,EAAiB;AAC5B,iBAAY,EAAiB;AAAA,IAC/B;AAEA,QAAI,KAAK,MAAM;AACb,UAAI,KAAK,eAAe,WAAW,KAAK,eAAe,SAAS;AAC9D,aAAK,SAAS,aAAa,KAAK,aAAc,GAAG,MAAM,CAAC,CAAC;AAAA,MAC3D;AAAA,IACF;AAEA,QAAI,KAAK,YAAY;AACnB,WAAK,aAAc,UAAU,OAAO,UAAU;AAC9C,UAAI,KAAK,eAAe,WAAW,KAAK,eAAe,SAAS;AAC9D,aAAK;AAAA,UACH;AAAA,UACA,KAAK,aAAc,cAAe,UAAU,GAAG,MAAM,EAAE;AAAA,QACzD;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,iBAAiB;AACxB,WAAK,WAAW,KAAK,WAAW,EAAE,KAAK,QAAQ;AAC/C,WAAK,WAAW,KAAK,WAAW,EAAE,KAAK,QAAQ;AAC/C,WAAK,kBAAkB;AAAA,IACzB;AACA,QAAI,KAAK,eAAe,MAAM;AAC5B,UACE,SAAS,UAAU,OAAO,WACzB,KAAK,sBACH,SAAS,QAAQ,wBAAwB,KAAK,QAC7C,SAAS,UAAU,OAAO,kBAC9B;AACA,YACE,KAAK,sBACJ,SAAS,QAAQ,wBAAwB,KAAK,QAC7C,SAAS,UAAU,OAAO,kBAC5B;AACA,cAAI,SAAS,QAAQ,wBAAwB,KAAK,MAAM;AACtD,gBAAI,WAAW,SAAS,QAAQ,wBAAwB,EACrD,cAAe;AAAA,UACpB,OAAO;AACL,gBAAI,WAAW,SAAS;AAAA,UAC1B;AACA,cACE,OAAO,KAAK,KAAK,cAAc,SAAS,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,WAC1D,GACA;AACA,gBAAI,cAAgC;AAAA,UACtC,OAAO;AACL,gBAAI,cAAgC;AAAA,UACtC;AAAA,QACF,OAAO;AAEL,cAAI,WAAW,SAAS,cAAe,cAAe;AACtD,cAAI,cAAgC,SAAS,UAAU;AAAA,QACzD;AACA,YAAI,YAAY,KAAK,aAAc,cAAe,cAAe;AACjE,YAAI,eAAe,KAAK,aAAc,UAAU;AAEhD,YAAI,cAAc,YAAY,gBAAgB,OAAO;AACnD,cACE,CAAC,KAAK,UAAU;AAAA,YACd,uBAAuB,qBAAqB,aAAa,gBAAgB;AAAA,UAC3E,GACA;AAGA,iBAAK,eAAgB,QAAQ,UAAU;AACvC,iBAAK,eAAgB,QAAQ,WAAW;AAExC,iBAAK,eAAgB,UAAU;AAAA,cAC7B,WAAW;AAAA,cACX,YAAY;AAAA,cACZ;AAAA,YACF;AAEA,gBAAI,OAAO,gBAAgB;AACzB,mBAAK,eAAgB,UAAU,IAAI,WAAW;AAEhD,gBAAI,WAAW,SAAS,MAAM,CAAC;AAC/B,gBAAI,YAAY,UAAU,MAAM,CAAC;AAEjC,iBAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,WAAW,QAClD,cACA,YAAY,KAAK,EAAE,MAAM,UAAU,QAAQ,YAAY,CAAC;AAC1D,iBAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,UAAU,OACjD,aACA,YAAY,KAAK,EAAE,MAAM,WAAW,OAAO,aAAa,CAAC;AAC3D,iBAAK,sBAAsB,UAAU,SAAS;AAC9C,iBAAK,sBAAsB,UAAU,QAAQ;AAC7C,iBAAK,SAAS,qBAAqB;AAAA,cACjC,WAAW;AAAA,cACX,UAAU;AAAA,cACV;AAAA,cACA;AAAA,YACF,CAAC;AAAA,UACH,OAAO;AACL,iBAAK,SAAS,oBAAoB,IAAI;AACtC,iBAAK,eAAgB,OAAO;AAAA,UAC9B;AAEA,eAAK,iBAAiB;AAAA,QACxB,OAAO;AAEL,eAAK,SAAS,oBAAoB,IAAI;AACtC,qBAAK,mBAAL,mBAAqB;AACrB,eAAK,iBAAiB;AAAA,QACxB;AAAA,MACF,OAAO;AAEL,aAAK,SAAS,oBAAoB,IAAI;AACtC,mBAAK,mBAAL,mBAAqB;AACrB,aAAK,iBAAiB;AAAA,MACxB;AAAA,IACF;AAEA,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,eAAe;AACpB,SAAK,kBAAkB;AAEvB,SAAK,SAAS,WAAW,CAAC;AAAA,EAC5B;AAAA,EACU,YACR,GACgB;AAnzBpB;AAozBI,SAAK,SAAS,eAAe,CAAC;AAC9B,MAAE,eAAe;AACjB,QAAI,KAAK,gBAAgB,WAAW,KAAK,gBAAgB,QAAQ;AAC/D,aAAO;AAAA,IACT;AACA,QAAI,KAAK,UAAW,uBAAuB,iBAAiB,EAAE,QAAQ;AACpE,iBAAW,MAAM,KAAK,UAAW;AAAA,QAC/B;AAAA,MACF,GAAG;AACD,WAAG,OAAO;AAAA,MACZ;AAAA,IACF;AACA,QAAI,KAAK,iBAAiB,KAAK,qBAAqB;AAClD,YAAM,YAAY,kBAAkB,QACjC,cAAc,kBAAkB,EAChC,UAAU,IAAI;AAEjB,UAAI,KAAK,eAAe;AACtB,aAAK,cAAc,YAAY,SAAS;AAAA,MAC1C;AACA,UACE,QAAO,sBAAK,wBAAL,mBAA0B,kBAA1B,mBAAyC,cAAzC,mBAAoD,MAAM,IAAI,GACrE;AACA,cAAM,EAAE,GAAG,EAAE,IAAI,KAAK,UAAW,sBAAsB;AACvD,cAAM,EAAE,cAAc,YAAY,IAAI,KAAK;AAC3C,cAAM,EAAE,SAAS,QAAQ,IAAI;AAE7B,kBAAU,MAAM,MAAM,GACpB,WAAW,gBAAgB,eAAe,KAAK,SAC/C,KAAK,gBAAgB,eAAe,KAAK;AAG3C,kBAAU,MAAM,OAAO,GACrB,WAAW,eAAe,cAAc,KAAK,SAC7C,KAAK,eAAe,cAAc,KAAK;AAGzC,aAAK,UAAW,YAAY,SAAS;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAAA,EACU,iBAAiB;AACzB,QAAI,KAAK,UAAW,uBAAuB,iBAAiB,EAAE,QAAQ;AACpE,WAAK,UAAW,uBAAuB,iBAAiB,EAAE,GAAG,OAAO;AAAA,IACtE;AAAA,EACF;AAAA,EAEQ,IAAI,GAAkC;AAC5C,SAAK,SAAS,WAAW,CAAC;AAC1B,QAAI,KAAK,gBAAgB,WAAW,KAAK,gBAAgB,QAAQ;AAC/D,aAAO;AAAA,IACT;AACA,QAAI,EAAE,QAAQ,YAAa,EAAE,QAAQ,eAAe,EAAE,SAAU;AAC9D,UAAI,KAAK,iBAAiB,MAAM;AAC9B,YACE,KAAK,YAAa,YAAY,WAC9B,KAAK,YAAa,YAAY,cAC9B,KAAK,YAAa,aAAa,iBAAiB,MAAM,MACtD;AACA,eAAK,aAAa,KAAK,cAAc,EAAE;AAAA,QACzC;AAAA,MACF;AACA,UAAI,KAAK,uBAAuB,MAAM;AACpC,aAAK,iBAAiB;AAAA,MACxB;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,WAAW,OAAmB,OAAa;AACjD,QAAI,MAAM,SAAS;AACjB,YAAM,eAAe;AACrB,UAAI,MAAM,SAAS,GAAG;AAEpB,aAAK,SAAS;AAAA,MAChB,OAAO;AAEL,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAAA,EAKA,eAAe;AACb,SAAK,SAAS,QAAQ,KAAK,IAAI;AAC/B,SAAK,WAAY,KAAK,WAAW,KAAK,kBAAmB,KAAK;AAC9D,SAAK,WAAY,KAAK,WAAW,KAAK,kBAAmB,KAAK;AAC9D,SAAK,kBAAkB,KAAK;AAC5B,SAAK,UAAW,MAAM,YAAY,WAAW,KAAK,KAAK,SAAS,CAAC;AAAA,EASnE;AAAA,EAKA,UAAU;AACR,QAAI,KAAK,OAAO,KAAK,UAAU;AAC7B,WAAK,QAAQ,KAAK;AAClB,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AAAA,EAKA,WAAW;AACT,QAAI,KAAK,OAAO,KAAK,UAAU;AAC7B,WAAK,QAAQ,KAAK;AAClB,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AAAA,EAKA,aAAa;AACX,QAAI,KAAK,QAAQ,GAAG;AAClB,WAAK,OAAO;AACZ,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AAAA,EAEQ,gBACN,aACA,aACA,WACA,WACA,iBACA,MACQ;AACR,UAAM,SAAS;AACf,UAAM,SAAS;AACf,UAAM,IAAI;AACV,UAAM,IAAI;AACV,UAAM,YAAY;AAElB,QAAI;AACJ,QAAI;AAGJ,YAAQ,MAAM;AAAA,MACZ,KAAK;AACH,cAAM,SAAS,KAAK,IAAI,IAAI,MAAM,IAAI;AACtC,cACE,IACA,KAAK,IAAI,IAAI,MAAM,KAChB,eAAe,YAAY,YAAY,KAAK;AACjD;AAAA,MACF,KAAK;AACH,cACE,SACA,KAAK,IAAI,IAAI,MAAM,KAChB,eAAe,YAAY,YAAY,KAAK;AACjD,cAAM,IAAI,KAAK,IAAI,IAAI,MAAM,IAAI;AACjC;AAAA,MACF,KAAK;AACH,cACE,SACA,KAAK,IAAI,IAAI,MAAM,KAChB,eAAe,YAAY,YAAY,KAAK;AACjD,cACE,IACA,KAAK,IAAI,IAAI,MAAM,KAChB,eAAe,YAAY,YAAY,KAAK;AACjD;AAAA,MACF;AACE,cAAM,SAAS,KAAK,IAAI,IAAI,MAAM,IAAI;AACtC,cAAM,IAAI,KAAK,IAAI,IAAI,MAAM,IAAI;AAAA,IACrC;AAEA,WAAO,KAAK,UAAU,YAAY,OAAO,UAAU,OAAO,KAAK,KAAK;AAAA,EACtE;AAAA,EAEQ,eAAe,KAAc;AACnC,UAAM,aAAa,eAAe;AAAA;AAAA;AAAA;AAAA,KAIjC,EAAE,QAAQ,UAAU,IAAI;AAEzB,SAAK,iBAAiB,WAAW,cAAc,aAAa;AAC5D,SAAK,UAAW,YAAY,UAAU;AACtC,UAAM,YAAY,IAAI,cAAe,cAAe,GAAG,MAAM,CAAC;AAC9D,UAAM,eAAe,IAAI,UAAU;AACnC,SAAK,SAAS,mBAAmB;AAAA,MAC/B,WAAW;AAAA,MACX;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEQ,iBAAiB,IAAY,IAAY;AAC/C,UAAM,YAAY,KAAK;AACvB,UAAM,OAAO,KAAK;AAClB,QAAI,qBACF,UAAW,eAAe,UAAW,cAAc;AACrD,yBAAqB,sBAAsB;AAC3C,QAAI,sBACF,UAAW,gBAAgB,UAAW,eAAe;AACvD,0BAAsB,uBAAuB;AAC7C,QAAI,OAAO,KAAK,eAAgB,SAAS;AAEzC,QAAI,SACF,KAAK,aAAc,cAAc,KAChC,KAAK,aAAc,sBAAsB,EAAE,IAC1C,UAAW,sBAAsB,EAAE,KACnC;AACJ,QAAI,SACF,KAAK,aAAc,eAAe,KACjC,KAAK,aAAc,sBAAsB,EAAE,IAC1C,UAAW,sBAAsB,EAAE,KACnC;AAEJ,QAAI,IACF,MACG,KAAK,UAAW,eACd,KAAK,UAAW,cAAc,KAAK,SACxC,KAAK,UAAW,sBAAsB,EAAE,KACrC,KAAK,UAAW,eACd,KAAK,UAAW,cAAc,KAAK;AAC1C,QAAI,IACF,MACG,KAAK,UAAW,gBACd,KAAK,UAAW,eAAe,KAAK,SACzC,KAAK,UAAW,sBAAsB,EAAE,KACrC,KAAK,UAAW,gBACd,KAAK,UAAW,eAAe,KAAK;AAE3C,QAAI,YAAY,KAAK;AACrB,QAAI,YAAY,KAAK;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,SAAK,eAAe,MAAM,KAAK,SAAS;AAAA,EAC1C;AAAA,EASA,cACE,WACA,UACA,cACA,aACA,mBAA2B,IAC3B;AAxjCJ;AAyjCI,UAAM,gBAAgB,KAAK,oBAAoB,SAAS;AAGxD,QAAI,kBAAkB,KAAK,oBAAoB,QAAQ,GAAG;AACxD,YAAM,WAAyB,KAAK,cAAc,SAAS;AAE3D,YAAM,QAAiB,CAAC,GAAC,cAAS,QAAQ,kBAAjB,mBAAgC,YAAY;AAAA,QACnE,CAAC,EAAE,MAAM,OAAO,MAAM,SAAS,YAAY,WAAW;AAAA;AAWxD,UAAI;AAAO;AAEX,iBAAK,SAAS,SAAS,eAAe,KAAK,WAAW,QACpD,kBADF,mBAEG,YAAY,KAAK;AAAA,QAClB,MAAM,SAAS,SAAS;AAAA,QACxB,QAAQ;AAAA,QACR,WAAW;AAAA,MACb;AACA,iBAAK,SAAS,SAAS,eAAe,KAAK,UAAU,OACnD,iBADF,mBAEG,YAAY,KAAK;AAAA,QAClB,MAAM,UAAU,SAAS;AAAA,QACzB,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AAEA,UAAI,KAAK,WAAW,iBAAiB,KAAK,WAAW;AAEnD,cAAM,MAAM,eAAe;AAAA;AAAA,6CAEU,0BAA0B,aAAa,gBAAgB,eAAe;AAAA,iCAClF;AAAA,kCACC;AAAA;AAAA;AAAA;AAAA,SAIzB,EAAE,QAAQ,UAAU,IAAI;AAEzB,aAAK,UAAU,YAAY,GAAG;AAC9B,aAAK,sBAAsB,QAAQ,WAAW;AAC9C,aAAK,sBAAsB,QAAQ,UAAU;AAAA,MAC/C;AAEA,WAAK,SAAS,qBAAqB;AAAA,QACjC,WAAW;AAAA,QACX,UAAU;AAAA,QACV;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IAEH;AAAA,EACF;AAAA,EAMA,sBAAsB,IAA8B;AAClD,UAAM,aAAa,WAAW;AAC9B,UAAM,cAAc,YAAY;AAChC,UAAM,YAAY,KAAK;AACvB,UAAM,YAAY,KAAK;AACvB,UAAM,YAAY,KAAK;AACvB,UAAM,oBAAoB,KAAK;AAC/B,UAAM,8BAA8B,KAAK;AACzC,UAAM,wBAAwB,KAAK;AACnC,UAAM,eAAe,KAAK;AAC1B,UAAM,OAAO,KAAK;AAClB,UAAM,qBACJ,UAAW,eAAe,UAAW,cAAc,SAAS;AAC9D,UAAM,sBACJ,UAAW,gBAAgB,UAAW,eAAe,SAAS;AAIhE,UAAM,EAAE,GAAG,KAAK,GAAG,IAAI,IAAI,UAAU,sBAAsB;AAE3D,eAAW,MAAM,UAAU;AAAA,MACzB,IAAI;AAAA,IACN,GAAG;AACD,UAAI,GAAG,cAAc,QAAQ,MAAM,MAAM;AACvC,cAAM,YAAY,GAAG,QAAQ;AAC7B,YAAI,CAAC;AAAW;AAEhB,cAAM,UAAU,UAAU;AAAA,UACxB,IAAI,OAAO,GAAG,UAAU;AAAA,QAC1B;AAEA,YAAI,CAAC;AAAS;AAEd,cAAM,QAAQ,UAAU;AAAA,UACtB,IAAI,cAAc,GAAG,UAAU;AAAA,QACjC;AAEA,YAAI,CAAC;AAAO;AAEZ,cAAM,EAAE,GAAG,UAAU,GAAG,SAAS,IAAI,MAAM,sBAAsB;AACjE,cAAM,EAAE,GAAG,QAAQ,GAAG,OAAO,IAAI,QAAQ,sBAAsB;AAE/D,cAAM,OACJ,MAAM,cAAc,KAAK,WAAW,OAAO;AAE7C,cAAM,OACJ,MAAM,eAAe,KAAK,WAAW,OAAO;AAE9C,cAAM,SACJ,QAAQ,cAAc,KAAK,SAAS,OAAO;AAE7C,cAAM,SACJ,QAAQ,eAAe,KAAK,SAAS,OAAO;AAE9C,cAAM,YAAY,KAAK;AAAA,UACrB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,QAAC,GAAG,SAAS,GAAsB,eAAe,MAAM,KAAK,SAAS;AAAA,MACxE,OAAO;AACL,cAAM,SAAS,GAAG,iBAAiB,QAAQ;AAC3C,YAAI,YAAY;AAChB,cAAM,aAAuB,CAAC;AAE9B,eAAO,QAAQ,CAAC,MAAM,MAAM;AAC1B,cAAI,MAAM,KAAK,OAAO,SAAS,MAAM,GAAG;AACtC,kBAAM,EAAE,GAAG,KAAK,GAAG,IAAI,IAAI,KAAK,sBAAsB;AAEtD,oBAAQ,IAAI,IAAI;AAEhB;AACE,oBAAMA,OAAM,MAAM,OAAO,qBAAqB;AAC9C,oBAAMC,OAAM,MAAM,OAAO,sBAAsB;AAE/C,oBAAMC,kBAAiB,UAAU;AAAA,gBAC/B,IAAI,OAAO,KAAK,cAAe,UAAU;AAAA,cAC3C;AAEA,oBAAM,EAAE,GAAG,cAAc,GAAG,aAAa,IACvCA,gBAAe,sBAAsB;AAEvC,oBAAMC,UACJD,gBAAe,cAAc,KAC5B,eAAe,OAAO;AAEzB,oBAAME,UACJF,gBAAe,eAAe,KAC7B,eAAe,OAAO;AAEzB,oBAAMG,mBAAkB,KAAK;AAAA,gBAC3BF;AAAA,gBACAC;AAAA,gBACAJ;AAAA,gBACAC;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AACA,2BAAaI;AACb,yBAAW,KAAKA,gBAAe;AAAA,YACjC;AACA;AAEE,oBAAMC,aAAY,KAAK,cAAe,UAAU,GAAG;AAAA,gBACjD;AAAA,gBACA;AAAA,cACF;AAEA,oBAAMC,iBAAgB,UAAU;AAAA,gBAC9B,IAAID,eAAc,KAAK,cAAe,UAAU;AAAA,cAClD;AAEA,oBAAM,EAAE,GAAG,WAAW,GAAG,UAAU,IACjCC,eAAc,sBAAsB;AAEtC,oBAAMP,MACJO,eAAc,cAAc,KAC3B,YAAY,OAAO;AAEtB,oBAAMN,MACJM,eAAc,eAAe,KAC5B,YAAY,OAAO;AAEtB,oBAAMJ,WAAU,MAAM,OAAO,qBAAqB;AAClD,oBAAMC,WAAU,MAAM,OAAO,sBAAsB;AAEnD,oBAAMC,mBAAkB,KAAK;AAAA,gBAC3BF;AAAA,gBACAC;AAAA,gBACAJ;AAAA,gBACAC;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AACA,2BAAaI;AACb,yBAAW,KAAKA,gBAAe;AAAA,YACjC;AAAA,UACF,WAAW,MAAM,GAAG;AAClB,gBAAI,oBAAoB,UAAU;AAAA,cAChC,IAAI;AAAA,YACN;AACA,gBAAI,cAAc;AAElB,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AAEF,gBAAI,iBAAiB,kBAAkB;AAAA,cACrC,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AACF,gBAAI,SACF,eAAe,cAAc,KAC5B,eAAe,sBAAsB,EAAE,IACtC,UAAU,sBAAsB,EAAE,KAClC;AACJ,gBAAI,SACF,eAAe,eAAe,KAC7B,eAAe,sBAAsB,EAAE,IACtC,UAAU,sBAAsB,EAAE,KAClC;AAEJ,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAG/B,gBAAI,oBAAoB;AACxB,gBAAI,cAAc,OAAO,IAAI;AAE7B,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AACF,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAAA,UACjC,WAAW,MAAM,OAAO,SAAS,GAAG;AAClC,gBAAI,oBAAoB;AAExB,gBAAI,YAAY,KAAK,cAAe,UAAU,GAAG;AAAA,cAC/C;AAAA,cACA;AAAA,YACF;AACA,gBAAI,gBAAgB,UAAU;AAAA,cAC5B,IAAI;AAAA,YACN;AACA,gBAAI,cAAc,cAAc;AAAA,cAC9B,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AAEF,gBAAI,gBAAgB,cAAc;AAAA,cAChC,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AACF,gBAAI,KACF,cAAc,cAAc,KAC3B,cAAc,sBAAsB,EAAE,IACrC,UAAU,sBAAsB,EAAE,KAClC;AACJ,gBAAI,KACF,cAAc,eAAe,KAC5B,cAAc,sBAAsB,EAAE,IACrC,UAAU,sBAAsB,EAAE,KAClC;AACJ,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,MACjC,UAAU,eAAe,UAAU,cAAc,SACpD;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,MACjC,UAAU,gBAAgB,UAAU,eAAe,SACtD;AACF,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAAA,UACjC,OAAO;AACL,gBAAI,oBAAoB;AACxB,gBAAI,cAAc,OAAO,IAAI;AAE7B,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,MACjC,UAAU,eAAe,UAAU,cAAc,SACpD;AACF,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,MACjC,UAAU,gBAAgB,UAAU,eAAe,SACtD;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,MACjC,UAAU,eAAe,UAAU,cAAc,SACpD;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,MACjC,UAAU,gBAAgB,UAAU,eAAe,SACtD;AACF,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAAA,UACjC;AAAA,QACF,CAAC;AACD,YAAI,uBAAuB;AACzB,qBAAW,QAAQ,CAAC,UAAU,MAAM;AAClC,eAAG,SAAS,GAAG,eAAe,MAAM,KAAK,QAAQ;AAAA,UACnD,CAAC;AAAA,QACH,OAAO;AACL,aAAG,SAAS,GAAG,eAAe,MAAM,KAAK,SAAS;AAAA,QACpD;AAAA,MACF;AAAA,IACF;AAIA,eAAW,MAAM,UAAU,iBAA6B,IAAI,YAAY,GAAG;AACzE,UAAI,GAAG,cAAc,QAAQ,MAAM,MAAM;AACvC,cAAM,cAAc,UAAU;AAAA,UAC5B,IAAI,GAAG,QAAQ,aAAa,GAAG,UAAU;AAAA,QAC3C;AAEA,gBAAQ,IAAI,IAAI,IAAI,GAAG,QAAQ,aAAa,GAAG,UAAU,IAAI;AAE7D,cAAM,EAAE,GAAG,KAAK,GAAG,IAAI,IAAI,YAAY,sBAAsB;AAE7D,cAAM,SACJ,YAAY,cAAc,KAAK,MAAM,OAAO;AAC9C,cAAM,SACJ,YAAY,eAAe,KAAK,MAAM,OAAO;AAE/C,cAAM,mBAAmB,UAAU;AAAA,UACjC,IAAI,OAAO,GAAG,UAAU;AAAA,QAC1B,EAAE;AACF,cAAM,IACJ,iBAAiB,cAAc,KAC9B,iBAAiB,sBAAsB,EAAE,IACxC,UAAU,sBAAsB,EAAE,KAClC;AACJ,cAAM,IACJ,iBAAiB,eAAe,KAC/B,iBAAiB,sBAAsB,EAAE,IACxC,UAAU,sBAAsB,EAAE,KAClC;AAEJ,cAAM,YAAY,KAAK;AAAA,UACrB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,WAAG,SAAS,GAAG,eAAe,MAAM,KAAK,SAAS;AAAA,MACpD,OAAO;AACL,cAAM,SAAS,GAAG,iBAA8B,QAAQ;AACxD,YAAI,YAAY;AAChB,cAAM,aAAuB,CAAC;AAC9B,eAAO,QAAQ,CAAC,MAAM,MAAM;AAC1B,cAAI,MAAM,KAAK,OAAO,SAAS,MAAM,GAAG;AACtC,gBAAI,oBAAoB,UAAU;AAAA,cAChC,IAAI;AAAA,YACN;AACA,gBAAI,cAAc;AAElB,gBAAI,UACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,UACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AAEF,gBAAI,gBAAgB,kBAAkB;AAAA,cACpC,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AACF,gBAAI,KACF,cAAc,cAAc,KAC3B,cAAc,sBAAsB,EAAE,IACrC,UAAU,sBAAsB,EAAE,KAClC;AACJ,gBAAI,KACF,cAAc,eAAe,KAC5B,cAAc,sBAAsB,EAAE,IACrC,UAAU,sBAAsB,EAAE,KAClC;AAEJ,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAE/B,gBAAI,oBAAoB;AACxB,gBAAI,YAAY,KAAK,cAAe,UAAU,GAAG;AAAA,cAC/C;AAAA,cACA;AAAA,YACF;AACA,gBAAI,gBAAgB,UAAU;AAAA,cAC5B,IAAI;AAAA,YACN;AACA,gBAAI,cAAc,cAAc;AAAA,cAC9B,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AAEF,gBAAI,iBAAiB,cAAc;AAAA,cACjC,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AACF,gBAAI,SACF,eAAe,cAAc,KAC5B,eAAe,sBAAsB,EAAE,IACtC,UAAU,sBAAsB,EAAE,KAClC;AACJ,gBAAI,SACF,eAAe,eAAe,KAC7B,eAAe,sBAAsB,EAAE,IACtC,UAAU,sBAAsB,EAAE,KAClC;AAEJ,gBAAI,MACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,MACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AACF,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAAA,UACjC,WAAW,MAAM,GAAG;AAElB,gBAAI,oBAAoB;AACxB,gBAAI,YAAY,KAAK,cAAe,UAAU,GAAG;AAAA,cAC/C;AAAA,cACA;AAAA,YACF;AACA,gBAAI,gBAAgB,UAAU;AAAA,cAC5B,IAAI;AAAA,YACN;AACA,gBAAI,cAAc,cAAc;AAAA,cAC9B,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AACF,gBAAI,iBAAiB,cAAc;AAAA,cACjC,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AACF,gBAAI,SACF,eAAe,cAAc,KAC5B,eAAe,sBAAsB,EAAE,IACtC,UAAU,sBAAsB,EAAE,KAClC;AACJ,gBAAI,SACF,eAAe,eAAe,KAC7B,eAAe,sBAAsB,EAAE,IACtC,UAAU,sBAAsB,EAAE,KAClC;AAEJ,gBAAI,MACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,MACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AACF,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAG/B,gBAAI,oBAAoB;AACxB,gBAAI,cAAc,OAAO,IAAI;AAE7B,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AACF,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAAA,UACjC,WAAW,MAAM,OAAO,SAAS,GAAG;AAClC,gBAAI,oBAAoB;AAExB,gBAAI,YAAY,KAAK,cAAe,UAAU,GAAG;AAAA,cAC/C;AAAA,cACA;AAAA,YACF;AACA,gBAAI,gBAAgB,UAAU;AAAA,cAC5B,IAAI;AAAA,YACN;AACA,gBAAI,cAAc,cAAc;AAAA,cAC9B,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AAEF,gBAAI,gBAAgB,cAAc;AAAA,cAChC,MAAM,KAAK,cAAe,UAAU;AAAA,YACtC,EAAE;AACF,gBAAI,KACF,cAAc,cAAc,KAC3B,cAAc,sBAAsB,EAAE,IACrC,UAAU,sBAAsB,EAAE,KAClC;AACJ,gBAAI,KACF,cAAc,eAAe,KAC5B,cAAc,sBAAsB,EAAE,IACrC,UAAU,sBAAsB,EAAE,KAClC;AAEJ,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AACF,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAAA,UACjC,OAAO;AACL,gBAAI,oBAAoB;AACxB,gBAAI,cAAc,OAAO,IAAI;AAE7B,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,MACD,YAAY,sBAAsB,EAAE,IACnC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,qBACF;AACF,gBAAI,UACD,kBAAkB,sBAAsB,EAAE,IACzC,UAAU,sBAAsB,EAAE,KAClC,sBACF;AACF,gBAAI,IAAI;AACR,gBAAI,IAAI;AAER,gBAAI,kBAAkB,KAAK;AAAA,cACzB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AACA,yBAAa;AACb,uBAAW,KAAK,eAAe;AAAA,UACjC;AAAA,QACF,CAAC;AACD,YAAI,uBAAuB;AACzB,qBAAW,QAAQ,CAAC,UAAU,MAAM;AAClC,eAAG,SAAS,GAAG,eAAe,MAAM,KAAK,QAAQ;AAAA,UACnD,CAAC;AAAA,QACH,OAAO;AACL,aAAG,SAAS,GAAG,eAAe,MAAM,KAAK,SAAS;AAAA,QACpD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,SAAS,GAAe;AAC9B,QAAI,KAAK,uBAAuB,QAAQ,KAAK,SAAS;AACpD,WAAK,mBAAmB,KAAK,mBAAmB;AAAA,IAClD;AAEA,QAAK,EAAE,OAAuB,UAAU,OAAO,SAAS;AACtD,WAAK,mBAAmB,EAAE,MAAqB;AAAA,IACjD;AAAA,EACF;AAAA,EAEQ,mBAAmB,KAA+B;AA9wD5D;AA+wDI,SAAK,oBAAqB,UAAU,OAAO,UAAU;AACrD,UAAM,aACJ,KAAK,oBAAqB,cAAe,UAAU,GAAG,MAAM,CAAC;AAC/D,UAAM,eACJ,KAAK,oBAAqB,cAAe,UAAU,GAAG,MAAM,EAAE;AAChE,UAAM,eAAe,KAAK,oBAAqB,cAAe,UAAU;AACxE,UAAM,cAAc,KAAK,oBAAqB,cAAe,UAAU;AACvE,SAAK,sBAAsB;AAC3B,UAAM,QAAQ,SAAS;AAAA,MACrB;AAAA,MACA;AAAA,IACF;AACA,UAAM,UAAU,IAAI,OAAO;AAC3B,QAAI,QACF,KAAK,SACF,KAAK,UAAW,eACd,KAAK,UAAW,cAAc,KAAK,SACxC,KAAK,UAAW,sBAAsB,EAAE,KACrC,KAAK,UAAW,eACd,KAAK,UAAW,cAAc,KAAK;AAC1C,QAAI,QACF,KAAK,SACF,KAAK,UAAW,gBACd,KAAK,UAAW,eAAe,KAAK,SACzC,KAAK,UAAW,sBAAsB,EAAE,KACrC,KAAK,UAAW,gBACd,KAAK,UAAW,eAAe,KAAK;AAE3C,UAAM,eAAe,MAAM,MAAM,MAAM,SAAS,CAAC;AACjD,UAAM,eAAe,MAAM,MAAM,MAAM,SAAS,CAAC;AACjD,UAAM,eAAe,MAAM,KAAK,KAAK,cAAc,SAAS,CAAC;AAE7D,QAAI,2BAA2B;AAC/B,QAAI,KAAK,uBAAuB;AAC9B,YAAM,eACJ,IAAI,cAAe,iBAAiB,YAAY,EAAE;AACpD,UAAI,OAAO,SAAS,gBAAgB,8BAA8B,MAAM;AACxE,WAAK,UAAU,IAAI,WAAW;AAC9B,WAAK,eAAe,MAAM,KAAK,EAAE;AAEjC,UAAI,cAAe;AAAA,QACjB;AAAA,QACA,IAAI,cAAe,SAAS;AAAA,MAC9B;AACA,UAAI,iBAAiB,GAAG;AACtB,YAAI,cAAe,YAAY,KAAK;AAAA,MACtC,OAAO;AACL,cAAM,eAAe,MAAM,KAAK,IAAI,cAAe,QAAQ,EAAE;AAAA,UAC3D;AAAA,QACF;AACA,mCAA2B;AAC3B,YAAI,cAAe;AAAA,UACjB;AAAA,UACA,IAAI,cAAe,SAAS,eAAe,eAAe;AAAA,QAC5D;AAAA,MACF;AAAA,IACF,OAAO;AACL,UAAI,cAAe,YAAY,KAAK;AAAA,IACtC;AAEA,UAAM,SAAS,WAAW,MAAM,CAAC;AACjC,UAAM,mBAAmB,KAAK,SAAS,SAAS,KAAK,QAAQ,KAC3D,QACA,QAAQ,cAAc,YAAY,UAAU,SAAU,MAAM,GAAG;AAC/D,aAAO,KAAK,SAAS,gBAAgB,KAAK,WAAW;AAAA,IACvD,CAAC;AAED,QACE,KAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,QAAQ,QAAQ,cACtD,YAAY,kBAAkB,WAAW,QAC5C;AACA,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,QAAQ,QAC/C,cACA,YAAY,kBAAkB,SAAS,CAAC;AAAA,IAC5C;AAEA,QAAI,KAAK,uBAAuB;AAC9B,UACE,2BAA2B,KAC3B,CAAC,GAAC,UAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,QAAQ,QAAQ,cACxD,YAAY,kBAAkB,WAD/B,mBACuC,SACzC;AACA,mBAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,QAAQ,QAC/C,cACA,YAAY,kBAAkB,WAFhC,mBAEwC;AAAA,UACtC;AAAA,UACA;AAAA,UACA,EAAE,OAAc,MAAa;AAAA;AAAA,MAEjC,OAAO;AACL,mBAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,QAAQ,QAC/C,cACA,YAAY,kBAAkB,WAFhC,mBAEwC,KAAK;AAAA,UAC3C;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAEA,UAAI,cAAe,iBAAiB,YAAY,EAAE,QAAQ,CAAC,MAAM,MAAM;AACrE,aAAK,UAAU,OAAO,UAAU;AAAA,MAClC,CAAC;AAAA,IACH,OAAO;AACL,iBAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,QAAQ,QAC/C,cACA,YAAY,kBAAkB,WAFhC,mBAEwC,KAAK;AAAA,QAC3C;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,SAAK,SAAS,cAAc,MAAM;AAClC,SAAK,sBAAsB,UAAU;AAAA,EACvC;AAAA,EAEQ,mBAAmB,KAAkB;AAj4D/C;AAk4DI,UAAM,aAAa,IAAI,cAAe,UAAU,GAAG,MAAM,CAAC;AAC1D,UAAM,eAAe,IAAI,cAAe,UAAU,GAAG,MAAM,EAAE;AAC7D,UAAM,eAAe,IAAI,cAAe,UAAU;AAClD,UAAM,cAAc,IAAI,cAAe,UAAU;AAEjD,QAAI,sBAAsB,MAAM,KAAK,IAAI,cAAe,QAAQ,EAAE;AAAA,MAChE;AAAA,IACF;AACA,UAAM,SAAS,WAAW,MAAM,CAAC;AACjC,UAAM,mBAAmB,KAAK,SAAS,SAAS,KAAK,QAAQ,KAC3D,QACA,QAAQ,cAAc,YAAY,UAAU,SAAU,MAAM,GAAG;AAC/D,aAAO,KAAK,SAAS,gBAAgB,KAAK,WAAW;AAAA,IACvD,CAAC;AAED,QAAI,KAAK,uBAAuB;AAC9B,YAAM,iBACJ,IAAI,cAAe,iBAAiB,YAAY,EAAE;AACpD,UAAI,cAAe,SAAS,iBAAiB,GAAG,OAAO;AACvD,6BAAuB;AACvB,UAAI,sBAAsB,GAAG;AAC3B,8BAAsB;AAAA,MACxB;AAAA,IACF,OAAO;AACL;AAAA,IACF;AACA,eAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,QAAQ,QAC/C,cACA,YAAY,kBAAkB,WAFhC,mBAEwC,OAAO,qBAAqB;AAEpE,QAAI,OAAO;AACX,SAAK,SAAS,iBAAiB,MAAM;AACrC,SAAK,sBAAsB,UAAU;AAAA,EACvC;AAAA,EAgBA,aACE,MACA,WACA,QAAuB,MACvB,UAAyB,MACnB;AACN,SAAK,aAAa,QAAQ;AAAA,MACxB,MAAM;AAAA,MACN;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAKA,cAAc,IAAmC;AAC/C,UAAM,aAAa,KAAK,oBAAoB,EAAE;AAC9C,WAAO,KAAK;AAAA,MACV,KAAK,UAAU,KAAK,SAAS,SAAS,YAAY,KAAK,GAAG;AAAA,IAC5D;AAAA,EACF;AAAA,EAKA,iBAAiB,MAAoC;AACnD,UAAM,QAA8B,CAAC;AACrC,UAAM,SAAS,KAAK,SAAS;AAC7B,WAAO,KAAK,MAAM,EAAE,IAAI,CAAC,eAAe;AACtC,iBAAW,QAAQ,OAAO,YAAY,MAAM;AAC1C,YAAI,OAAO,YAAY,KAAK,MAAM,QAAQ,MAAM;AAC9C,gBAAM,KAAK,OAAO,YAAY,KAAK,MAAM,EAAE;AAAA,QAC7C;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EAEU,oBACR,UACA,WACA;AACA,UAAM,WAAW;AAAA;AAAA;AAAA,qBAGA,SAAS;AAAA,iCACG,SAAS,SAAS;AAAA;AAAA,mBAEhC,SAAS;AAAA,oBACR,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAMf,OAAO,KAAK,SAAS,MAAM,EAC1B;AAAA,MACC,CAAC,eAAe,0BAA0B;AAAA,IAC5C,EACC,KAAK,EAAE;AAAA;AAAA;AAAA;AAAA,cAIR,OAAO,KAAK,SAAS,OAAO,EAC3B;AAAA,MACC,CAAC,gBACC,2BAA2B;AAAA,IAC/B,EACC,KAAK,EAAE;AAAA;AAAA;AAAA;AAAA;AAMlB,UAAM,SAAS,eAAe,QAAQ,EAAE,QAAQ;AAAA,MAC9C;AAAA,IACF;AAEA,UAAM,UAAU,OAAO;AAAA,MACrB,SAAS,SAAS;AAAA,IACpB;AAEA,QAAI,SAAS,aAAa,OAAO;AAC/B,cAAQ,YAAY,SAAS;AAAA,IAC/B,WAAW,SAAS,aAAa,MAAM;AACrC,YAAM,EAAE,MAAMG,UAAS,IAAI,KAAK,aAAa,SAAS;AAEtD,UAAI,EAAEA,qBAAoB;AACxB,cAAM,IAAI,UAAU,iCAAiC;AAEvD,YAAM,WACJA,qBAAoB,sBAAsBA,UAAS,UAAUA;AAE/D,cAAQ,YAAY,SAAS,UAAU,IAAI,CAAC;AAAA,IAC9C;AAEA,cAAU,YAAY,MAAM;AAE5B,QAAI,SAAS,aAAa,OAAO;AAC/B,UAAI,SAAU,KAAK,OAAe,OAAO,MAAM,GAAG;AAEhD,cAAM,UAAW,KAAK,OAAe;AAAA,UACnC,KAAK,aAAa,SAAS,MAAM;AAAA,UACjC,KAAK,aAAa,SAAS,MAAM;AAAA,UACjC,KAAK,aAAa,SAAS,MAAM;AAAA,QACnC;AACA,gBAAQ,aAAa,KAAK;AAC1B,QAAC,KAAK,OAAe,OAAO,SAAS,OAAO;AAAA,MAC9C,OAAO;AAEL,cAAM,UAAU,IAAK,KAAK,OAAe;AAAA,UACvC,QAAQ,KAAK;AAAA,UACb,QAAQ,CAAC,MACP,EAAE,KAAK,aAAa,SAAS,MAAM,MAAM;AAAA,YACvC,OAAO,KAAK,aAAa,SAAS,MAAM;AAAA,UAC1C,CAAC;AAAA,UACH,GAAG,KAAK,aAAa,SAAS,MAAM;AAAA,QACtC,CAAC,EAAE,OAAO;AACV,gBAAQ,YAAY,QAAQ,GAAG;AAAA,MACjC;AAAA,IACF;AAAA,EAiEF;AAAA,EA8BA,WACK,MAaiB;AACpB,UAAM,YAA6B,KAAK,UACpC,KAAK,QAAQ,IACb,KAAK;AAET,QAAI;AAEJ,SAAK,CAAC,MAA8C,EAAE,WAAW,GAAG,IAAI,GAAG;AACzE,aAAO,EAAE,GAAG,KAAK,IAAI,IAAI,UAAU;AAAA,IACrC,OAAO;AACL,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACAC;AAAA,QACA,WAAW;AAAA,MACb,IAAI;AAEJ,UAAI,aAAa,QAAQ,EAAEA,SAAQ,KAAK;AACtC,cAAM,IAAI,WAAW,QAAQA,kBAAiB;AAEhD,YAAM,cAAsC,CAAC;AAC7C,eAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,oBAAY,SAAS,IAAI,OAAO,EAAE,aAAa,CAAC,EAAE;AAAA,MACpD;AAEA,YAAM,eAAwC,CAAC;AAC/C,eAAS,IAAI,GAAG,IAAI,SAAS,KAAK;AAChC,qBAAa,UAAU,IAAI,OAAO,EAAE,aAAa,CAAC,EAAE;AAAA,MACtD;AAEA,aAAO;AAAA,QACL,IAAI;AAAA,QACJ;AAAA,QACA;AAAA,QACA,OAAO;AAAA,QACP,MAAAA;AAAA,QACA;AAAA,QACA,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,OAAO;AAAA,QACP,OAAO;AAAA,MACT;AAAA,IACF;AAEA,QAAI,KAAK;AAAW,WAAK,oBAAoB,MAAM,KAAK,SAAS;AACjE,SAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,aAAa;AACtD,SAAK,SAAS,eAAe,SAAS;AAEtC,WAAO;AAAA,EACT;AAAA,EAEQ,cAAc,UAAwB,WAAwB;AACpE,SAAK,oBAAoB,UAAU,SAAS;AAAA,EAC9C;AAAA,EAEQ,iBAAiB,UAAwB;AAC/C,UAAM,gBAAgB,KAAK;AAC3B,UAAM,wBAAwB,KAAK;AACnC,UAAM,YAAY,KAAK;AACvB,WAAO,KAAK,SAAS,OAAO,EAAE,IAAI,SAAU,aAAkB,OAAO;AACnE,aAAO,KAAK,SAAS,QAAQ,aAAa,WAAW,EAAE,IAAI,SACzD,YACAC,QACA;AACA,cAAM,SACJ,SAAS,QAAQ,aAAa,YAAY,YAAY;AACxD,YAAI,WAAW,QAAW;AACxB,iBAAO,QAAQ,CAAC,MAAM,MAAM;AAC1B,kBAAM,WACJ,SAAS,QAAQ,aAAa,YAAY,YAAY;AACxD,kBAAM,cACJ,SAAS,QAAQ,aAAa,YAAY,YAAY;AACxD,kBAAM,MAAM,UAAU;AAAA,cACpB,8BACE,WACA,oBACA,SAAS,KACT,MACA,cACA,MACA;AAAA,YACJ;AAEA,gBAAI,uBAAuB;AACzB,kBAAI,MAAM,GAAG;AACX,yBAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,sBAAI,OAAO,SAAS;AAAA,oBAClB;AAAA,oBACA;AAAA,kBACF;AACA,uBAAK,UAAU,IAAI,WAAW;AAC9B,uBAAK,eAAe,MAAM,KAAK,EAAE;AACjC,sBAAK,YAAY,IAAI;AAAA,gBACvB;AAAA,cACF;AAAA,YACF;AAEA,kBAAM,QAAQ,SAAS;AAAA,cACrB;AAAA,cACA;AAAA,YACF;AACA,kBAAM,UAAU,IAAI,OAAO;AAC3B,gBAAI,QAAQ,KAAK;AACjB,gBAAI,QAAQ,KAAK;AAEjB,kBAAM,eAAe,MAAM,MAAM,MAAM,SAAS,CAAC;AACjD,kBAAM,eAAe,MAAM,MAAM,MAAM,SAAS,CAAC;AACjD,kBAAM,eAAe,MAAM,KAAK,cAAc,SAAS,CAAC;AAExD,gBAAK,YAAY,KAAK;AAAA,UACxB,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEQ,gBAAgB,OAAc;AACpC,QAAI,OAAQ,MAAM,OAAuB;AACzC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAI,KAAK,GAAG,SAAS,WAAW,KAAK,GAAG;AACtC,YAAI,OAAO,KAAK,GAAG,SAAS,MAAM,CAAC,EAAE,MAAM,GAAG;AAC9C,YAAI,SACF,KAAK,SAAS,SAAS,KAAK,QAAQ,KACjC,MAAM,OACJ,QAAQ,wBAAwB,EAChC,cAAe,GAAG,MAAM,CAAC,GAC5B;AACJ,iBAAS,QAAQ,GAAG,QAAQ,KAAK,SAAS,GAAG,SAAS,GAAG;AACvD,cAAI,OAAO,KAAK,WAAW,MAAM;AAC/B,mBAAO,KAAK,UAAU,CAAC;AAAA,UACzB;AACA,mBAAS,OAAO,KAAK;AAAA,QACvB;AACA,eAAO,KAAK,KAAK,SAAS,MACxB,MAAM,OACN;AACF,YAAK,MAAM,OAAuB,mBAAmB;AACnD,iBAAO,KAAK,KAAK,SAAS,MACxB,MAAM,OACN;AAAA,QACJ;AACA,aAAK;AAAA,UACH;AAAA,UACC,MAAM,OACJ,QAAQ,wBAAwB,EAChC,cAAe,GAAG,MAAM,CAAC;AAAA,QAC9B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAOA,qBAAqB,IAAqB,MAAiB;AACzD,QAAI,aAAa,KAAK,oBAAoB,EAAE;AAC5C,SAAK,SAAS,SAAS,YAAY,KAAK,IAAI,OAAO;AACnD,QAAI,KAAK,WAAW,YAAY;AAC9B,YAAM,UAAU,KAAK,UAAU,cAAc,WAAW,EAAE;AAE1D,aAAO,QAAQ,IAAI,EAAE,QAAQ,SAAU,KAAK,OAAO;AACjD,YAAI,OAAO,IAAI,OAAO,UAAU;AAC9B,2BAAiB,MAAM,IAAI,IAAI,IAAI,EAAE;AAAA,QACvC,OAAO;AACL,cAAI,QAAQ,QAAS;AAAA,YACnB,SAAS,IAAI,KAAK;AAAA,UACpB;AACA,mBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,kBAAM,GAAG,QAAQ,IAAI;AACrB,gBAAI,MAAM,GAAG,mBAAmB;AAC9B,oBAAM,GAAG,YAAY,IAAI;AAAA,YAC3B;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAED,YAAM,mBAAmB,CACvB,QACA,MACA,gBACG;AACH,YAAI,WAAW,MAAM;AACnB,cAAI,SAAS,KAAK;AAAA,QACpB,OAAO;AACL,cAAI,SAAS,OAAO;AAAA,QACtB;AACA,YAAI,WAAW,MAAM;AACnB,iBAAO,QAAQ,MAAM,EAAE,QAAQ,SAAU,KAAK,OAAO;AACnD,gBAAI,OAAO,IAAI,OAAO,UAAU;AAC9B,+BAAiB,QAAQ,IAAI,IAAI,cAAc,MAAM,IAAI,EAAE;AAAA,YAC7D,OAAO;AACL,kBAAI,QAAQ,QAAS;AAAA,gBACnB,SAAS,cAAc,MAAM,IAAI,KAAK;AAAA,cACxC;AACA,uBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,sBAAM,GAAG,QAAQ,IAAI;AACrB,oBAAI,MAAM,GAAG,mBAAmB;AAC9B,wBAAM,GAAG,YAAY,IAAI;AAAA,gBAC3B;AAAA,cACF;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAMA,aAAa,IAA2B;AACtC,QAAI,aAAa,KAAK,oBAAoB,EAAE;AAC5C,UAAM,WAAW,KAAK,cAAc,EAAE;AACtC,UAAM,YAAY,OAAO,KAAK,SAAS,MAAM,EAAE;AAC/C,QAAI,KAAK,WAAW,YAAY;AAE9B,YAAM,QAAQ,SAAS,cAAc,KAAK;AAC1C,YAAM,UAAU,IAAI,OAAO;AAC3B,YAAM,UAAU,IAAI,YAAY,YAAY,EAAE;AAC9C,YAAM,SAAS,KAAK,UAAU,cAAc,WAAW,KAAK,UAAU;AACtE,uCAAQ,YAAY;AACpB,WAAK,sBAAsB,UAAU,EAAE;AAAA,IACzC;AACA,SAAK,SAAS,SAAS,YAAY,KAAK,IAAI,OAC1C,YAAY,YAAY,MACtB,EAAE,aAAa,CAAC,EAAE;AAAA,EACxB;AAAA,EAMA,cAAc,IAA2B;AACvC,QAAI,aAAa,KAAK,oBAAoB,EAAE;AAC5C,UAAM,WAAW,KAAK,cAAc,EAAE;AACtC,UAAM,aAAa,OAAO,KAAK,SAAS,OAAO,EAAE;AACjD,QAAI,KAAK,WAAW,YAAY;AAE9B,YAAM,SAAS,SAAS,cAAc,KAAK;AAC3C,aAAO,UAAU,IAAI,QAAQ;AAC7B,aAAO,UAAU,IAAI,aAAa,aAAa,EAAE;AACjD,YAAM,SAAS,KAAK,UAAU,cAAc,WAAW,KAAK,WAAW;AACvE,uCAAQ,YAAY;AACpB,WAAK,sBAAsB,UAAU,EAAE;AAAA,IACzC;AACA,SAAK,SAAS,SAAS,YAAY,KAAK,IAAI,QAC1C,aAAa,aAAa,MACxB,EAAE,aAAa,CAAC,EAAE;AAAA,EACxB;AAAA,EAOA,gBAAgB,IAAqB,aAA2B;AAh6ElE;AAi6EI,QAAI,aAAa,KAAK,oBAAoB,EAAE;AAC5C,UAAM,WAAW,KAAK,cAAc,EAAE;AACtC,QAAI,KAAK,WAAW,YAAY;AAC9B,iBAAK,UACF,cAAc,WAAW,KAAK,qBAAqB,WAAW,MADjE,mBAEI;AAAA,IACN;AACA,UAAM,eAAsB,CAAC;AAC7B,WAAO,KAAK,SAAS,OAAO,aAAa,WAAW,EAAE,IAAI,SACxD,KACA,OACA;AACA,YAAM,YAAY,SAAS,OAAO,aAAa,YAAY,OAAO;AAClE,YAAM,eACJ,SAAS,OAAO,aAAa,YAAY,OAAO;AAClD,mBAAa,KAAK,EAAE,WAAW,IAAI,cAAc,YAAY,CAAC;AAAA,IAChE,CAAC;AAED,iBAAa,QAAQ,CAAC,MAAM,MAAM;AAChC,WAAK;AAAA,QACH,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAAA,IACF,CAAC;AAED,WAAO,KAAK,SAAS,SAAS,YAAY,KAAK,IAAI,OAAO;AAG1D,UAAM,cAAoC,CAAC;AAC3C,UAAM,oBACJ,KAAK,SAAS,SAAS,YAAY,KAAK,IAAI;AAC9C,WAAO,KAAK,iBAAiB,EAAE,IAAI,SAAU,KAAK,OAAO;AACvD,kBAAY,KAAK,kBAAkB,IAAI;AAAA,IACzC,CAAC;AACD,SAAK,SAAS,SAAS,YAAY,KAAK,IAAI,SAAS,CAAC;AACtD,UAAM,iBAAiB,YAAY,MAAM,CAAC;AAC1C,QAAI,cAA0C,CAAC;AAC/C,gBAAY,QAAQ,CAAC,MAAM,MAAM;AAC/B,WAAK,YAAY,QAAQ,CAAC,OAAO,MAAM;AACrC,oBAAY,KAAK,KAAK;AAAA,MACxB,CAAC;AACD,WAAK,SAAS,SAAS,YAAY,KAAK,IAAI,OAAO,YAAY,IAAI,MACjE;AAAA,IACJ,CAAC;AACD,kBAAc,CAAC,GAAG,IAAI,IAAI,YAAY,IAAI,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;AAAA,MACpE,CAAC,MAAM,KAAK,MAAM,CAAC;AAAA,IACrB;AAEA,QAAI,KAAK,WAAW,YAAY;AAC9B,YAAM,OAAO,KAAK,UAAU;AAAA,QAC1B,WAAW,KAAK;AAAA,MAClB;AACA,WAAK,QAAQ,CAAC,MAAM,MAAM;AACxB,cAAM,WAAW,KAAK,UAAU,GAAG,MAAM,CAAC;AAC1C,YAAI,SAAS,cAAc,IAAI,SAAS,QAAQ,GAAG;AACjD,eAAK,UAAU,OAAO,WAAW,QAAQ;AACzC,eAAK,UAAU,IAAI,YAAY,CAAC,WAAW,EAAE;AAAA,QAC/C;AAAA,MACF,CAAC;AAAA,IACH;AAEA,gBAAY,QAAQ,CAAC,OAAO,MAAM;AAChC,WAAK,SAAS,SAAS,YAAY,KAAK,MAAM,MAAM,QAClD,MAAM,OACN,YAAY,QAAQ,CAAC,OAAO,MAAM;AAClC,YAAI,MAAM,QAAQ,IAAI;AACpB,gBAAM,YAAY,MAAM,OAAQ,MAAM,CAAC;AACvC,cAAI,SAAS,cAAc,IAAI,SAAS,SAAS,GAAG;AAClD,gBAAI,KAAK,WAAW,YAAY;AAC9B,oBAAM,MAAM,KAAK,UAAU;AAAA,gBACzB,8BACE,KACA,oBACA,MAAM,OACN,MACA,MAAM,QACN,YACA;AAAA,cACJ;AACA,kBAAK,UAAU,OAAO,WAAW,SAAS;AAC1C,kBAAK,UAAU,IAAI,YAAY,CAAC,YAAY,EAAE;AAAA,YAChD;AACA,gBAAI,MAAM,QAAQ;AAChB,mBAAK,SAAS,SAAS,YAAY,KAAK,MAAM,MAAM,QAClD,MAAM,OACN,YAAY,KAAK;AAAA,gBACjB,MAAM,MAAM;AAAA,gBACZ,QAAQ,YAAY,CAAC,YAAY;AAAA,gBACjC,QAAQ,MAAM;AAAA,cAChB;AAAA,YACF,OAAO;AACL,mBAAK,SAAS,SAAS,YAAY,KAAK,MAAM,MAAM,QAClD,MAAM,OACN,YAAY,KAAK;AAAA,gBACjB,MAAM,MAAM;AAAA,gBACZ,QAAQ,YAAY,CAAC,YAAY;AAAA,cACnC;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,SAAK,sBAAsB,UAAU,EAAE;AAAA,EACzC;AAAA,EAOA,iBAAiB,IAAqB,cAA4B;AAjhFpE;AAkhFI,QAAI,aAAa,KAAK,oBAAoB,EAAE;AAC5C,UAAM,WAAW,KAAK,cAAc,EAAE;AACtC,QAAI,KAAK,WAAW,YAAY;AAC9B,iBAAK,UACF,cAAc,SAAS,uBAAuB,cAAc,MAD/D,mBAEI;AAAA,IACN;AACA,UAAM,gBAAuB,CAAC;AAC9B,WAAO,KAAK,SAAS,QAAQ,cAAc,WAAW,EAAE,IAAI,SAC1D,KACA,OACA;AACA,YAAM,WAAW,SAAS,QAAQ,cAAc,YAAY,OAAO;AACnE,YAAM,cACJ,SAAS,QAAQ,cAAc,YAAY,OAAO;AACpD,oBAAc,KAAK,EAAE,IAAI,UAAU,cAAc,YAAY,CAAC;AAAA,IAChE,CAAC;AAED,kBAAc,QAAQ,CAAC,MAAM,MAAM;AACjC,WAAK;AAAA,QACH,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AAAA,IACF,CAAC;AAED,WAAO,KAAK,SAAS,SAAS,YAAY,KAAK,IAAI,QAAQ;AAG3D,UAAM,cAAoC,CAAC;AAC3C,UAAM,oBACJ,KAAK,SAAS,SAAS,YAAY,KAAK,IAAI;AAC9C,WAAO,KAAK,iBAAiB,EAAE,IAAI,SAAU,KAAK,OAAO;AACvD,kBAAY,KAAK,kBAAkB,IAAI;AAAA,IACzC,CAAC;AACD,SAAK,SAAS,SAAS,YAAY,KAAK,IAAI,UAAU,CAAC;AACvD,UAAM,kBAAkB,aAAa,MAAM,CAAC;AAC5C,QAAI,cAA0C,CAAC;AAC/C,gBAAY,QAAQ,CAAC,MAAM,MAAM;AAC/B,WAAK,YAAY,QAAQ,CAAC,OAAO,MAAM;AACrC,oBAAY,KAAK,EAAE,MAAM,MAAM,MAAM,QAAQ,MAAM,OAAO,CAAC;AAAA,MAC7D,CAAC;AACD,WAAK,SAAS,SAAS,YAAY,KAAK,IAAI,QAAQ,aAAa,IAAI,MACnE;AAAA,IACJ,CAAC;AACD,kBAAc,CAAC,GAAG,IAAI,IAAI,YAAY,IAAI,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;AAAA,MACpE,CAAC,MAAM,KAAK,MAAM,CAAC;AAAA,IACrB;AAEA,QAAI,KAAK,WAAW,YAAY;AAC9B,YAAM,OAAO,KAAK,UAAU;AAAA,QAC1B,WAAW,KAAK;AAAA,MAClB;AACA,WAAK,QAAQ,CAAC,MAAM,MAAM;AACxB,cAAM,WAAW,KAAK,UAAU,GAAG,MAAM,CAAC;AAC1C,YAAI,SAAS,eAAe,IAAI,SAAS,QAAQ,GAAG;AAClD,eAAK,UAAU,OAAO,YAAY,QAAQ;AAC1C,eAAK,UAAU,IAAI,aAAa,CAAC,WAAW,EAAE;AAAA,QAChD;AAAA,MACF,CAAC;AAAA,IACH;AAEA,gBAAY,QAAQ,CAAC,OAAO,MAAM;AAChC,WAAK,SAAS,SAAS,YAAY,KAAK,MAAM,MAAM,OAClD,MAAM,QACN,YAAY,QAAQ,CAAC,OAAO,MAAM;AAClC,YAAI,MAAM,QAAQ,IAAI;AACpB,gBAAM,WAAW,MAAM,MAAO,MAAM,CAAC;AACrC,cAAI,SAAS,eAAe,IAAI,SAAS,QAAQ,GAAG;AAClD,gBAAI,KAAK,WAAW,YAAY;AAC9B,oBAAM,MAAM,KAAK,UAAU;AAAA,gBACzB,8BACE,MAAM,OACN,oBACA,KACA,aACA,WACA,MACA,MAAM;AAAA,cACV;AACA,kBAAK,UAAU,OAAO,YAAY,QAAQ;AAC1C,kBAAK,UAAU,OAAO,MAAM,MAAO;AACnC,kBAAK,UAAU,IAAI,aAAa,CAAC,WAAW,EAAE;AAC9C,kBAAK,UAAU,IAAI,MAAM,MAAO;AAAA,YAClC;AACA,gBAAI,MAAM,QAAQ;AAChB,mBAAK,SAAS,SAAS,YAAY,KAAK,MAAM,MAAM,OAClD,MAAM,QACN,YAAY,KAAK;AAAA,gBACjB,MAAM,MAAM;AAAA,gBACZ,OAAO,aAAa,CAAC,WAAW;AAAA,gBAChC,QAAQ,MAAM;AAAA,cAChB;AAAA,YACF,OAAO;AACL,mBAAK,SAAS,SAAS,YAAY,KAAK,MAAM,MAAM,OAClD,MAAM,QACN,YAAY,KAAK;AAAA,gBACjB,MAAM,MAAM;AAAA,gBACZ,OAAO,aAAa,CAAC,WAAW;AAAA,cAClC;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,SAAK,sBAAsB,UAAU,EAAE;AAAA,EACzC;AAAA,EAKA,aAAa,IAA2B;AAnoF1C;AAooFI,SAAK,uBAAuB,EAAE;AAC9B,QAAI,aAAa,KAAK,oBAAoB,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;AAChE,QAAI,KAAK,WAAW,YAAY;AAC9B,iBAAK,UAAU,cAAc,IAAI,IAAI,MAArC,mBAAwC;AAAA,IAC1C;AACA,WAAO,KAAK,SAAS,SAAS,YAAY,KAAK,GAAG,SAAS,EAAE,MAAM,CAAC;AACpE,SAAK,SAAS,eAAe,GAAG,SAAS,EAAE,MAAM,CAAC,CAAC;AAAA,EACrD;AAAA,EAEQ,mBAAmB;AACzB,QAAI,KAAK,uBAAuB,MAAM;AACpC,UAAI,YAAY,KAAK,oBAAqB,cAAe;AACzD,WAAK,oBAAoB,cAAe,OAAO;AAE/C,UAAI,YAAY,KAAK,SAAS,SAAS,KAAK,QAAQ,KAClD,UAAU,GAAG,MAAM,EAAE,GACrB,QAAQ,UAAU,IAAI,YAAY,UAAU,SAAU,MAAM,GAAG;AAC/D,eACE,KAAK,SAAS,UAAU,GAAG,MAAM,EAAE,KAAK,KAAK,WAAW,UAAU;AAAA,MAEtE,CAAC;AACD,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,UAAU,GAAG,MAAM,EAAE,GAAG,QAC/D,UAAU,IACV,YAAY,OAAO,WAAW,CAAC;AAEjC,UAAI,WAAW,KAAK,SAAS,SAAS,KAAK,QAAQ,KACjD,UAAU,GAAG,MAAM,EAAE,GACrB,OAAO,UAAU,IAAI,YAAY,UAAU,SAAU,MAAM,GAAG;AAC9D,eACE,KAAK,SAAS,UAAU,GAAG,MAAM,EAAE,KAAK,KAAK,UAAU,UAAU;AAAA,MAErE,CAAC;AACD,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,UAAU,GAAG,MAAM,EAAE,GAAG,OAC/D,UAAU,IACV,YAAY,OAAO,UAAU,CAAC;AAChC,WAAK,SAAS,qBAAqB;AAAA,QACjC,WAAW,UAAU,GAAG,MAAM,EAAE;AAAA,QAChC,UAAU,UAAU,GAAG,MAAM,EAAE;AAAA,QAC/B,cAAc,UAAU;AAAA,QACxB,aAAa,UAAU;AAAA,MACzB,CAAC;AACD,WAAK,sBAAsB;AAAA,IAC7B;AAAA,EACF;AAAA,EASA,uBACE,WACA,UACA,cACA,aACS;AA7rFb;AA8rFI,QAAI,gBAAgB,KAAK,oBAAoB,SAAS;AACtD,QAAI,gBAAgB,KAAK,oBAAoB,QAAQ;AACrD,QAAI,kBAAkB,eAAe;AAInC,UAAI,SAAS,KAAK,SAAS,SAAS,eAAe,KACjD,WACA,QAAQ,cAAc,YAAY,UAAU,SAAU,MAAM,GAAG;AAC/D,eAAO,KAAK,QAAQ,YAAY,KAAK,WAAW;AAAA,MAClD,CAAC;AACD,UAAI,SAAS,IAAI;AACf,YAAI,KAAK,WAAW,eAAe;AAEjC,2BAAK,cAAL,mBACI;AAAA,YACA,4BAA4B,0BAA0B,aAAa,gBAAgB;AAAA,gBAFvF,mBAII;AAAA,QACN;AAEA,YAAI,YAAY,KAAK,SAAS,SAAS,eAAe,KACpD,WACA,QAAQ,cAAc,YAAY,UAAU,SAAU,MAAM,GAAG;AAC/D,iBAAO,KAAK,QAAQ,YAAY,KAAK,WAAW;AAAA,QAClD,CAAC;AACD,aAAK,SAAS,SAAS,eAAe,KAAK,WAAW,QACpD,cACA,YAAY,OAAO,WAAW,CAAC;AAEjC,YAAI,WAAW,KAAK,SAAS,SAAS,eAAe,KACnD,UACA,OAAO,aAAa,YAAY,UAAU,SAAU,MAAM,GAAG;AAC7D,iBAAO,KAAK,QAAQ,aAAa,KAAK,UAAU;AAAA,QAClD,CAAC;AACD,aAAK,SAAS,SAAS,eAAe,KAAK,UAAU,OACnD,aACA,YAAY,OAAO,UAAU,CAAC;AAEhC,aAAK,SAAS,qBAAqB;AAAA,UACjC,WAAW;AAAA,UACX,UAAU;AAAA,UACV;AAAA,UACA;AAAA,QACF,CAAC;AACD,eAAO;AAAA,MACT,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAMA,uBAAuB,IAA2B;AAChD,UAAM,aAAa,aAAa;AAChC,UAAM,cAAc,cAAc;AAElC,UAAM,WAAW,KAAK,UAAU,iBAAiB,IAAI,aAAa;AAClE,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC7C,UAAI,YAAY,SAAS,GAAG;AAE5B,UAAI,WAAW,KAAK,SAAS,SAAS,KAAK,QAAQ,KACjD,UAAU,GAAG,MAAM,EAAE,GACrB,OAAO,UAAU,IAAI,YAAY,UAAU,SAAU,MAAMC,IAAG;AAC9D,eACE,KAAK,SAAS,UAAU,GAAG,MAAM,EAAE,KAAK,KAAK,UAAU,UAAU;AAAA,MAErE,CAAC;AACD,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,UAAU,GAAG,MAAM,EAAE,GAAG,OAC/D,UAAU,IACV,YAAY,OAAO,UAAU,CAAC;AAEhC,UAAI,YAAY,KAAK,SAAS,SAAS,KAAK,QAAQ,KAClD,UAAU,GAAG,MAAM,EAAE,GACrB,QAAQ,UAAU,IAAI,YAAY,UAAU,SAAU,MAAMA,IAAG;AAC/D,eACE,KAAK,SAAS,UAAU,GAAG,MAAM,EAAE,KAAK,KAAK,WAAW,UAAU;AAAA,MAEtE,CAAC;AACD,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,UAAU,GAAG,MAAM,EAAE,GAAG,QAC/D,UAAU,IACV,YAAY,OAAO,WAAW,CAAC;AAEjC,eAAS,GAAG,OAAO;AAEnB,WAAK,SAAS,qBAAqB;AAAA,QACjC,WAAW,UAAU,GAAG,MAAM,EAAE;AAAA,QAChC,UAAU,UAAU,GAAG,MAAM,EAAE;AAAA,QAC/B,cAAc,UAAU;AAAA,QACxB,aAAa,UAAU;AAAA,MACzB,CAAC;AAAA,IACH;AAEA,UAAM,UAAU,KAAK,UAAU,iBAAiB,IAAI,YAAY;AAChE,aAAS,IAAI,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AAC5C,UAAI,YAAY,QAAQ,GAAG;AAE3B,UAAI,YAAY,KAAK,SAAS,SAAS,KAAK,QAAQ,KAClD,UAAU,GAAG,MAAM,EAAE,GACrB,QAAQ,UAAU,IAAI,YAAY,UAAU,SAAU,MAAMA,IAAG;AAC/D,eACE,KAAK,SAAS,UAAU,GAAG,MAAM,EAAE,KAAK,KAAK,WAAW,UAAU;AAAA,MAEtE,CAAC;AACD,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,UAAU,GAAG,MAAM,EAAE,GAAG,QAC/D,UAAU,IACV,YAAY,OAAO,WAAW,CAAC;AAEjC,UAAI,WAAW,KAAK,SAAS,SAAS,KAAK,QAAQ,KACjD,UAAU,GAAG,MAAM,EAAE,GACrB,OAAO,UAAU,IAAI,YAAY,UAAU,SAAU,MAAMA,IAAG;AAC9D,eACE,KAAK,SAAS,UAAU,GAAG,MAAM,EAAE,KAAK,KAAK,UAAU,UAAU;AAAA,MAErE,CAAC;AACD,WAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,UAAU,GAAG,MAAM,EAAE,GAAG,OAC/D,UAAU,IACV,YAAY,OAAO,UAAU,CAAC;AAEhC,cAAQ,GAAG,OAAO;AAElB,WAAK,SAAS,qBAAqB;AAAA,QACjC,WAAW,UAAU,GAAG,MAAM,EAAE;AAAA,QAChC,UAAU,UAAU,GAAG,MAAM,EAAE;AAAA,QAC/B,cAAc,UAAU;AAAA,QACxB,aAAa,UAAU;AAAA,MACzB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EAMA,oBAAoB,IAA6B;AAC/C,QAAI,aAAqB;AAEzB,eAAW,CAAC,YAAY,EAAE,KAAK,CAAC,KAAK,OAAO;AAAA,MAC1C,KAAK,SAAS;AAAA,IAChB,GAAG;AACD,UAAI,OAAO,OAAO,MAAM,GAAG,SAAS,CAAC,GAAG;AACtC,qBAAa;AACb;AAAA,MACF;AAAA,IACF;AAWA,WAAO;AAAA,EACT;AAAA,EAEA,UAAU,MAAoB;AAC5B,SAAK,SAAS,SAAS,QAAQ,EAAE,MAAM,CAAC,EAAE;AAC1C,SAAK,SAAS,iBAAiB,IAAI;AAAA,EACrC;AAAA,EAEA,aAAa,MAAoB;AAC/B,SAAK,SAAS,iBAAiB,IAAI;AACnC,SAAK,SAAS;AACd,SAAK,UAAW,YAAY;AAC5B,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,SAAK,kBAAkB;AACvB,SAAK,UAAW,MAAM,YAAY;AAClC,SAAK,OAAO,KAAK,UAAU,KAAK;AAAA,EAClC;AAAA,EAEA,aAAa,MAAoB;AAC/B,QAAI,KAAK,WAAW,MAAM;AACxB,WAAK,aAAa,MAAM;AAAA,IAC1B;AACA,WAAO,KAAK,SAAS,SAAS;AAC9B,SAAK,SAAS,iBAAiB,IAAI;AAAA,EACrC;AAAA,EAKA,sBAA4B;AAC1B,SAAK,UAAW,YAAY;AAC5B,SAAK,SAAS,SAAS,KAAK,UAAU,EAAE,MAAM,CAAC,EAAE;AAAA,EACnD;AAAA,EAKA,QAAc;AACZ,SAAK,UAAW,YAAY;AAC5B,SAAK,WAAW,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,EAAE,EAAE;AAAA,EACrD;AAAA,EACA,SAAyB;AACvB,UAAM,aAAa,KAAK,MAAM,KAAK,UAAU,KAAK,QAAQ,CAAC;AAC3D,SAAK,SAAS,UAAU,UAAU;AAClC,WAAO;AAAA,EACT;AAAA,EAOA,OAAO,MAAsB,SAAkB,MAAY;AACzD,SAAK,MAAM;AACX,SAAK,WAAW,KAAK,MAAM,KAAK,UAAU,IAAI,CAAC;AAC/C,SAAK,KAAK;AACV,QAAI,QAAQ;AACV,WAAK,SAAS,UAAU,QAAQ;AAAA,IAClC;AAAA,EACF;AAAA,EA8KA,GAAG,OAAe,UAAgD;AAEhE,QAAI,OAAO,aAAa,YAAY;AAClC,cAAQ;AAAA,QACN,+DAA+D,OAAO;AAAA,MACxE;AACA,aAAO;AAAA,IACT;AAEA,QAAI,OAAO,UAAU,UAAU;AAC7B,cAAQ;AAAA,QACN,sDAAsD,OAAO;AAAA,MAC/D;AACA,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,OAAO,WAAW,QAAW;AACpC,WAAK,OAAO,SAAS;AAAA,QACnB,WAAW,CAAC;AAAA,MACd;AAAA,IACF;AACA,SAAK,OAAO,OAAO,UAAU,KAAK,QAAQ;AAAA,EAC5C;AAAA,EAEA,eAAe,OAAe,UAA+B;AAG3D,QAAI,CAAC,KAAK,OAAO;AAAQ,aAAO;AAEhC,UAAM,YAAY,KAAK,OAAO,OAAO;AACrC,UAAM,gBAAgB,UAAU,QAAQ,QAAQ;AAChD,UAAM,cAAc,gBAAgB;AACpC,QAAI;AAAa,gBAAU,OAAO,eAAe,CAAC;AAAA,EACpD;AAAA,EAEQ,SAAS,OAAe,SAA8B;AAE5D,QAAI,KAAK,OAAO,WAAW,QAAW;AAEpC,aAAO;AAAA,IACT;AACA,SAAK,OAAO,OAAO,UAAU,QAAQ,CAAC,aAAa;AACjD,eAAS,OAAO;AAAA,IAClB,CAAC;AAAA,EACH;AAAA,EAEA,UAAkB;AAChB,WAAO,WAAK;AAAA,EAad;AAAA,EAEA,iBAAiB,QAAgD;AA3oGnE;AA4oGI,YACE,gBAAK,cAAL,mBAAgB,cAA2B,SAAS,cAApD,YAAiE;AAAA,EAErE;AACF;AA9+FE;",
  "names": ["eX", "eY", "elemtsearchOut", "line_x", "line_y", "lineCurveSearch", "id_search", "elemtsearchIn", "template", "html", "index", "i"]
}
